{"version":3,"sources":["webpack:///src/app/shared/list-table/base-list/base-list.component.ts","webpack:///src/app/shared/list-table/base-table/base-table.component.ts","webpack:///src/app/models/domain/new-dto/person.new.dto.ts","webpack:///src/app/services/image-util.service.ts","webpack:///src/app/views/persons/persons-form.component.ts","webpack:///src/app/models/domain/dto/country.dto.ts","webpack:///src/app/models/domain/dto/state.dto.ts","webpack:///src/app/models/domain/dto/city.dto.ts","webpack:///src/app/services/domain/country.service.ts","webpack:///src/app/shared/list-table/base-card-list/base-card-list.component.ts","webpack:///src/app/services/zip-code.service.ts","webpack:///src/app/services/domain/state.service.ts","webpack:///src/app/services/domain/city.service.ts","webpack:///src/app/models/domain/dto/meeting-schedule.dto.ts"],"names":["BaseListComponent","translateService","storageService","modalService","super","globalHeader","error$","queryField","hasError","recordsCount","params","modalTexts","confirm","title","body","success","error","loading","confirmTitle","confirmBody","successTitle","successMessage","errorTitle","errorMessage","loadingErrorTitle","loadingErrorMessage","message","this","showAlertDanger","BaseTableComponent","_localUser","tableHeaders","PersonNewDTO","phoneNumbers","id","name","email","socialSecurityNumber","password","street","number","value","complement","zipCode","cityId","ImageUtilService","fileName","toLowerCase","split","join","PersonsFormComponent","CountryDTO","abbreviation","StateDTO","CityDTO","formBuilder","router","zipCodeService","countryService","stateService","cityService","personService","currentCountryId","currentStateAbbreviation","currentCityName","countries","states","cities","previousSocialSecurityNumber","previousEmail","socialSecurityNumberExists","emailExists","showModal","countries$","loadCountries","form","buildForm","valueChanges","subscribe","response","Object","assign","model","get","countryId","loadStates","stateId","loadCities","statusChanges","pipe","distinctUntilChanged","switchMap","status","searchZipCode","data","loadAddressData","subscription$","unsubscribe","currentForm","fields","keys","controls","forEach","field","push","map","index","endsWith","replace","char","toUpperCase","substring","length","showValidations","listCountries","country","DTO","parseInt","listStates","loadedStates","state","setTimeout","STATE","filter","getAbbreviation","patchValue","getId","listCities","loadedCities","city","CITY","getName","group","required","minLength","maxLength","confirmPassword","equalsTo","phoneNumber0","phoneNumber1","phoneNumber2","currentCountry","includes","valid","findPersonBySSN","environment","API","console","log","findPersonByEmail","searchSocialSecurityNumber","searchEmail","CountryService","httpClient","listAll","BaseCardListComponent","ZipCodeService","test","StateService","CityService","MeetingScheduleDTO","datetime","employee","student","meetingStatus"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ModalService } from '../../../services/modal.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\nimport { BaseTranslateComponent } from '../../base-translate/base-translate.component';\r\n\r\n@Component({\r\n  selector: 'app-base-list',\r\n  template: '<div></div>'\r\n})\r\nexport abstract class BaseListComponent<T = any> extends BaseTranslateComponent implements OnInit {\r\n\r\n  public globalHeader = 'header';\r\n  public records$: Observable<T[]>;\r\n  public error$ = new Subject<boolean>();\r\n  public queryField = new FormControl();\r\n  public hasError = false;\r\n  public recordsCount = 0;\r\n  protected params = new HttpParams();\r\n  protected selectedModel: T;\r\n\r\n  // modal related\r\n  protected modalTexts = {\r\n    confirm: { title: 'modal.titles.confirmation', body: 'modal.messages.confirmation' },\r\n    success: { title: 'modal.titles.success', body: 'modal.messages.delete-success' },\r\n    error: { title: 'modal.titles.error', body: 'modal.messages.delete-error' },\r\n    loading: { body: 'global.messages.system-error' }\r\n  };\r\n\r\n  protected confirmTitle = 'modal.titles.confirmation';\r\n  protected confirmBody = 'modal.messages.confirmation';\r\n  protected successTitle = 'modal.titles.success';\r\n  protected successMessage = 'modal.messages.delete-success';\r\n  protected errorTitle = 'modal.titles.error';\r\n  protected errorMessage = 'modal.messages.delete-error';\r\n  protected loadingErrorTitle = 'modal.titles.error';\r\n  protected loadingErrorMessage = 'global.messages.system-error';\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    protected modalService: ModalService) {\r\n    super(translateService, storageService);\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public abstract onUpdate(): void;\r\n  public abstract onDelete(model: T);\r\n  protected abstract loadData(): void;\r\n\r\n  protected handleError(title: string, message: string): void {\r\n    this.modalService.showAlertDanger(title, message);\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ModalService } from '../../../services/modal.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\nimport { LocalUser } from 'src/app/models/local-user';\r\n\r\nimport { BaseListComponent } from '../base-list/base-list.component';\r\n\r\n@Component({\r\n  selector: 'app-base-table',\r\n  template: '<div></div>'\r\n})\r\nexport abstract class BaseTableComponent<T = any> extends BaseListComponent<T> {\r\n\r\n  protected _localUser = new LocalUser ();\r\n  public tableHeaders: string[] = [];\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    protected modalService: ModalService,\r\n  ) {\r\n    super(translateService, storageService, modalService);\r\n  }\r\n\r\n  protected abstract pipeFindAll(observable: Observable<any>): any;\r\n  public abstract onReload(): void;\r\n}\r\n","\r\nexport abstract class PersonNewDTO {\r\n\r\n    protected id: number;\r\n    protected name: string;\r\n    protected email: string;\r\n    protected socialSecurityNumber: string;\r\n    protected password: string;\r\n    protected phoneNumbers: string[] = [];\r\n\r\n    protected street: string;\r\n    protected number: string;\r\n    protected complement: string;\r\n    protected zipCode: string;\r\n\r\n    protected cityId: number;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getEmail(): string {\r\n        return this.email;\r\n    }\r\n\r\n    public setEmail(email: string) {\r\n        this.email = email;\r\n    }\r\n\r\n    public getSocialSecurityNumber(): string {\r\n        return this.socialSecurityNumber;\r\n    }\r\n\r\n    public setSocialSecurityNumber(socialSecurityNumber: string) {\r\n        this.socialSecurityNumber = socialSecurityNumber;\r\n    }\r\n\r\n    public getPassword(): string {\r\n        return this.password;\r\n    }\r\n\r\n    public setPassword(password: string) {\r\n        this.password = password;\r\n    }\r\n\r\n    public getPhoneNumbers(): string[] {\r\n        return this.phoneNumbers;\r\n    }\r\n\r\n    public setPhoneNumbers(phoneNumbers: string[]) {\r\n        this.phoneNumbers = phoneNumbers;\r\n    }\r\n\r\n    public getStreet(): string {\r\n        return this.street;\r\n    }\r\n\r\n    public setStreet(street: string) {\r\n        this.street = street;\r\n    }\r\n\r\n    public getNumber(): string {\r\n        return this.number;\r\n    }\r\n\r\n    public setNumber(value: string) {\r\n        this.number = value;\r\n    }\r\n\r\n    public getComplement(): string {\r\n        return this.complement;\r\n    }\r\n\r\n    public setComplement(complement: string) {\r\n        this.complement = complement;\r\n    }\r\n\r\n    public getZipCode(): string {\r\n        return this.zipCode;\r\n    }\r\n\r\n    public setZipCode(zipCode: string) {\r\n        this.zipCode = zipCode;\r\n    }\r\n\r\n    public getCityId(): number {\r\n        return this.cityId;\r\n    }\r\n\r\n    public setCityId(cityId: number) {\r\n        this.cityId = cityId;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageUtilService {\r\n\r\n  constructor() { }\r\n\r\n  public buildFileName(fileName: string): string {\r\n    if (!fileName || fileName === '') {\r\n      return null;\r\n    }\r\n\r\n    fileName = fileName.toLowerCase ();\r\n    fileName = fileName.split (' ').join ('-');\r\n    fileName = fileName.split ('_').join ('-');\r\n    return fileName;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { map, distinctUntilChanged, switchMap } from 'rxjs/operators';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ModalService } from 'src/app/services/modal.service';\r\nimport { ZipCodeService } from 'src/app/services/zip-code.service';\r\nimport { CountryService } from 'src/app/services/domain/country.service';\r\nimport { StateService } from 'src/app/services/domain/state.service';\r\nimport { CityService } from 'src/app/services/domain/city.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\nimport { PersonService } from 'src/app/services/domain/person.service';\r\n\r\nimport { CountryDTO } from 'src/app/models/domain/dto/country.dto';\r\nimport { StateDTO } from 'src/app/models/domain/dto/state.dto';\r\nimport { CityDTO } from 'src/app/models/domain/dto/city.dto';\r\nimport { PersonDTO } from 'src/app/models/domain/dto/person.dto';\r\n\r\nimport { FormValidators } from 'src/app/shared/utils/form-validators';\r\n\r\nimport { BaseFormComponent } from 'src/app/shared/base-form/base-form.component';\r\n\r\n@Component({\r\n    selector: 'app-persons-form',\r\n    template: '<div></div>'\r\n})\r\nexport abstract class PersonsFormComponent<T> extends BaseFormComponent<T> implements OnInit, OnDestroy {\r\n\r\n    protected currentCountryId = 0;\r\n    protected currentStateAbbreviation = '';\r\n    protected currentCityName = '';\r\n\r\n    public countries$: Observable<CountryDTO[]>;\r\n    protected countries: CountryDTO[] = [];\r\n    public states: StateDTO[] = [];\r\n    public cities: CityDTO[] = [];\r\n\r\n    private previousSocialSecurityNumber = '';\r\n    private previousEmail = '';\r\n    protected socialSecurityNumberExists = false;\r\n    protected emailExists = false;\r\n\r\n    constructor(\r\n        protected translateService: TranslateService,\r\n        protected storageService: StorageService,\r\n        protected formBuilder: FormBuilder,\r\n        protected router: Router,\r\n        protected modalService: ModalService,\r\n        protected zipCodeService: ZipCodeService,\r\n        protected countryService: CountryService,\r\n        protected stateService: StateService,\r\n        protected cityService: CityService,\r\n        protected personService: PersonService,\r\n    ) {\r\n        super(translateService, storageService, formBuilder, router);\r\n        this.showModal = true;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        // default values\r\n        this.countries$ = this.loadCountries ();\r\n        this.form = this.buildForm ();\r\n        this.form.valueChanges.subscribe (response => Object.assign (this.model, response));\r\n\r\n        this.form.get ('countryId').valueChanges.subscribe (\r\n            (countryId) => {\r\n                if (countryId !== null && countryId !== '') {\r\n                    this.loadStates (countryId);\r\n                }\r\n                else {\r\n                    this.states = [];\r\n                    this.cities = [];\r\n                }\r\n            },\r\n            () => this.states = []\r\n        );\r\n\r\n        this.form.get ('stateId').valueChanges.subscribe (\r\n            (stateId) => {\r\n                if (this.currentCountryId !== null && this.currentCountryId !== 0 && stateId !== null && stateId !== '') {\r\n                    this.loadCities (stateId);\r\n                }\r\n                else {\r\n                    this.cities = [];\r\n                }\r\n            },\r\n            () => this.cities = []\r\n        );\r\n\r\n        this.form.get ('zipCode').statusChanges.pipe (\r\n            distinctUntilChanged (),\r\n            switchMap (status => {\r\n                return status === 'VALID' ? this.zipCodeService.searchZipCode (this.form.get ('zipCode').value) : EMPTY;\r\n            })\r\n        ).subscribe (data => data ? this.loadAddressData (data) : {});\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription$.unsubscribe ();\r\n    }\r\n\r\n    protected showValidationModal(currentForm: FormGroup): void {\r\n\r\n        const fields: string[] = [];\r\n        Object.keys (currentForm.controls).forEach (field => fields.push (field));\r\n\r\n        fields.map ((name, index) => {\r\n          if (name.endsWith ('Id')) {\r\n            name = name.replace ('Id', '');\r\n          }\r\n\r\n          name = name.split ('').map (char => char === char.toUpperCase () ? ` ${char}` : char).join('');\r\n          name = (name.substring (0, 1).toUpperCase () + name.substring (1, name.length));\r\n          fields[index] = name;\r\n        });\r\n\r\n        this.modalService.showValidations (fields);\r\n    }\r\n\r\n    private loadCountries(): Observable<CountryDTO[]> {\r\n        return this.countryService.listCountries ().pipe (\r\n            map (countries => {\r\n                return countries.map (country => {\r\n                    const DTO = new CountryDTO ();\r\n                    Object.assign (DTO, country);\r\n                    this.countries.push (DTO);\r\n                    return DTO;\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    private loadStates(countryId: string): void {\r\n        this.currentCountryId = parseInt (countryId, 10);\r\n        this.subscription$ = this.stateService.listStates (parseInt (countryId, 10)).subscribe (\r\n            (loadedStates: StateDTO[]) => {\r\n                this.states = loadedStates.map (state => {\r\n                    const DTO = new StateDTO ();\r\n                    Object.assign (DTO, state);\r\n                    return DTO;\r\n                });\r\n\r\n                setTimeout (() => {\r\n                    if (this.currentStateAbbreviation !== '') {\r\n                        const STATE = this.states.filter (state => state.getAbbreviation () === this.currentStateAbbreviation)[0];\r\n                        if (STATE != null) {\r\n                            this.form.patchValue ({ stateId: STATE.getId () });\r\n                        } else {\r\n                            this.currentStateAbbreviation = '';\r\n                        }\r\n                    }\r\n                }, 100);\r\n            },\r\n            () => this.states = []\r\n        );\r\n    }\r\n\r\n    private loadCities(stateId: string): void {\r\n        this.subscription$ = this.cityService.listCities(this.currentCountryId, parseInt(stateId, 10))\r\n            .subscribe((loadedCities: CityDTO[]) => {\r\n                this.cities = loadedCities.map (city => {\r\n                    const DTO = new CityDTO ();\r\n                    Object.assign (DTO, city);\r\n                    return DTO;\r\n                });\r\n\r\n                setTimeout (() => {\r\n                    if (this.currentCityName !== '') {\r\n                        const CITY = this.cities.filter (\r\n                            city => city.getName ().toLowerCase () === this.currentCityName.toLowerCase ())[0];\r\n\r\n                        if (CITY != null) {\r\n                            this.form.patchValue ({ cityId: CITY.getId () });\r\n                        } else {\r\n                            this.currentCityName = '';\r\n                        }\r\n                    }\r\n                }, 100);\r\n            },\r\n            () => this.cities = []\r\n        );\r\n    }\r\n\r\n    private buildForm(): FormGroup {\r\n        return this.formBuilder.group({\r\n            id: [null],\r\n            name: [null, [Validators.required, Validators.minLength (5), Validators.maxLength (120)]],\r\n            email: [null, [Validators.required, Validators.email, Validators.maxLength (30)]],\r\n            socialSecurityNumber: [null, [Validators.required, Validators.minLength (11), Validators.maxLength (11)]],\r\n            password: [null, [Validators.required, Validators.minLength (10), Validators.maxLength (20)]],\r\n            confirmPassword: [null, [Validators.required, FormValidators.equalsTo ('password')]],\r\n            phoneNumbers: this.formBuilder.group({\r\n                phoneNumber0: [null, [Validators.required, Validators.minLength (12), Validators.maxLength (12)]],\r\n                phoneNumber1: [null, [Validators.minLength (12), Validators.maxLength (12)]],\r\n                phoneNumber2: [null, [Validators.minLength (12), Validators.maxLength (12)]],\r\n            }),\r\n            street: [null, [Validators.required, Validators.minLength (5), Validators.maxLength (120)]],\r\n            number: [null, [Validators.required, Validators.minLength (1), Validators.maxLength (5)]],\r\n            complement: [null],\r\n            zipCode: [null, [Validators.required, Validators.minLength(5), Validators.maxLength (10), FormValidators.zipCode]],\r\n            countryId: [null, [Validators.required]],\r\n            stateId: [null, [Validators.required]],\r\n            cityId: [null, [Validators.required]],\r\n        });\r\n    }\r\n\r\n    private loadAddressData(data: any): void {\r\n\r\n        if (!('error' in data)) {\r\n            const currentCountry = this.countries.filter (country => country.getAbbreviation ().includes (data.country))[0];\r\n            if (currentCountry != null) {\r\n                this.currentCountryId = currentCountry.getId ();\r\n                this.currentStateAbbreviation = data.state;\r\n                this.currentCityName = data.city;\r\n                this.form.patchValue ({ countryId: currentCountry.getId () });\r\n            }\r\n        }\r\n        else {\r\n            this.modalService.showAlertDanger ('modal.titles.attention', 'modal.messages.zipcode-not-found');\r\n        }\r\n    }\r\n\r\n    private searchSocialSecurityNumber(socialSecurityNumber: string): void {\r\n        if (this.form.get('socialSecurityNumber').valid) {\r\n            if (this.previousSocialSecurityNumber !== socialSecurityNumber) {\r\n                const URL = `${environment.API}/v1/public/persons/ssn`;\r\n                this.subscription$ = this.personService.findPersonBySSN(URL, socialSecurityNumber)\r\n                    .subscribe(response => {\r\n                        const dto = response as PersonDTO;\r\n                        if (dto != null) {\r\n                            this.socialSecurityNumberExists = true;\r\n                            this.modalService.showAlertDanger ('modal.titles.error', 'modal.messages.ssn-found');\r\n                        }\r\n                    },\r\n                    error => {\r\n                        console.log (error);\r\n                        this.socialSecurityNumberExists = false;\r\n                        this.previousSocialSecurityNumber = socialSecurityNumber;\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    private searchEmail(email: string): void {\r\n        if (this.form.get('email').valid) {\r\n            if (this.previousEmail !== email) {\r\n                const URL = `${environment.API}/v1/public/persons/email`;\r\n                this.subscription$ = this.personService.findPersonByEmail(URL, email).subscribe(\r\n                    response => {\r\n                        const DTO = response as PersonDTO;\r\n                        if (DTO != null) {\r\n                            this.emailExists = true;\r\n                            this.modalService.showAlertDanger ('modal.titles.error', 'modal.messages.email-found');\r\n                        }\r\n                    },\r\n                    error => {\r\n                        console.log (error);\r\n                        this.emailExists = false;\r\n                        this.previousEmail = email;\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSocialSecurityNumberFocusOut(value: string): void {\r\n        this.searchSocialSecurityNumber (value);\r\n    }\r\n\r\n    public onEmailFocusOut(value: string): void {\r\n        this.searchEmail (value);\r\n    }\r\n}\r\n","\r\nexport class CountryDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private abbreviation: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getAbbreviation(): string {\r\n        return this.abbreviation;\r\n    }\r\n\r\n    public setAbbreviation(abbreviation: string) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n}\r\n","\r\nexport class StateDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private abbreviation: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getAbbreviation(): string {\r\n        return this.abbreviation;\r\n    }\r\n\r\n    public setAbbreviation(abbreviation: string) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n}\r\n","\r\nexport class CityDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CountryDTO } from '../../models/domain/dto/country.dto';\r\n\r\nimport { CrudService } from '../crud.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountryService extends CrudService<CountryDTO> {\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n  }\r\n\r\n  public listCountries(): Observable<CountryDTO[]> {\r\n    return this.listAll (`${environment.API}/v1/public/countries`);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { ModalService } from '../../../services/modal.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\nimport { BaseListComponent } from '../base-list/base-list.component';\r\n\r\n@Component({\r\n  selector: 'app-base-card-list',\r\n  template: '<div></div>'\r\n})\r\nexport abstract class BaseCardListComponent<T = any> extends BaseListComponent<T> {\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    protected modalService: ModalService) {\r\n    super(translateService, storageService, modalService);\r\n  }\r\n\r\n  public abstract onDelete(model: T): void;\r\n  public abstract onSearch(): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ZipCodeService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public searchZipCode(zipCode: string): Observable<object> {\r\n\r\n    if (zipCode !== '') {\r\n      const regex = /^[0-9]{5}(?:-[0-9]{4})?$/;\r\n      if (regex.test (zipCode)) {\r\n        return this.httpClient.get (`//ziptasticapi.com/${zipCode}`);\r\n      }\r\n    }\r\n\r\n    return of ({});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from '../crud.service';\r\n\r\nimport { StateDTO } from '../../models/domain/dto/state.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StateService extends CrudService<StateDTO> {\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n  }\r\n\r\n  public listStates(countryId: number): Observable<StateDTO[]> {\r\n    return this.listAll (`${environment.API}/v1/public/countries/${countryId}/states`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from '../crud.service';\r\n\r\nimport { CityDTO } from '../../models/domain/dto/city.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CityService extends CrudService<CityDTO> {\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n  }\r\n\r\n  public listCities(countryId: number, stateId: number): Observable<CityDTO[]> {\r\n    const url = `${environment.API}/v1/public/countries/${countryId}/states/${stateId}/cities`;\r\n    return this.listAll (url);\r\n  }\r\n}\r\n","import { EmployeeDTO } from './employee.dto';\r\nimport { StudentDTO } from './student.dto';\r\n\r\nexport class MeetingScheduleDTO {\r\n\r\n    private id: number;\r\n    private datetime: Date;\r\n    private employee: EmployeeDTO;\r\n    private student: StudentDTO;\r\n    private meetingStatus: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getDatetime(): Date {\r\n        return this.datetime;\r\n    }\r\n\r\n    public setDatetime(datetime: Date) {\r\n        this.datetime = datetime;\r\n    }\r\n\r\n    public getEmployee(): EmployeeDTO {\r\n        return this.employee;\r\n    }\r\n\r\n    public setEmployee(employee: EmployeeDTO) {\r\n        this.employee = employee;\r\n    }\r\n\r\n    public getStudent(): StudentDTO {\r\n        return this.student;\r\n    }\r\n\r\n    public setStudent(student: StudentDTO) {\r\n        this.student = student;\r\n    }\r\n\r\n    public getMeetingStatus(): string {\r\n        return this.meetingStatus;\r\n    }\r\n\r\n    public setMeetingStatus(meetingStatus: string) {\r\n        this.meetingStatus = meetingStatus;\r\n    }\r\n}\r\n"]}