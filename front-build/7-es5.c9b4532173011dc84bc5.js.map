{"version":3,"sources":["webpack:///src/app/views/courses/courses-list/courses-list.component.html","webpack:///src/app/views/courses/courses-routing.module.ts","webpack:///src/app/views/courses/courses-list/courses-list.component.ts","webpack:///src/app/views/courses/courses.module.ts"],"names":["CoursesListComponent","CoursesRoutingModule","CoursesModule","ROUTES","path","component","translateService","modalService","storageService","courseService","authenticationService","super","currentFilter","timePeriods","periodDescriptions","isSelected","this","globalHeader","confirmBody","tableHeaders","listTimePeriods","getPeriodDescriptions","onReload","hasError","records$","loadData","result$","showConfirm","modalTexts","confirm","title","body","asObservable","pipe","take","switchMap","result","deleteCourse","selectedModel","getId","subscribe","showAlertSuccess","success","showAlertDanger","error","unsubscribe","filter","value","pipeFindAll","findByKeyAndValueWhereUrlIs","protectedUrl","findAll","observable","map","courses","course","dto","Object","assign","catchError","error$","next","handleError","loading","showSchoolClass","showNewCourse","showNewSchoolClass","period","getTranslatedPeriod","type","getTranslatedCourseType","profile","containsProfile","toggleFilter","forChild"],"mappings":"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","file":"x","sourcesContent":["\r\n<!-- courses -->\r\n<article class=\"table-box w-100 shadow-lg mx-auto my-md-5 my-3\">\r\n    <header>\r\n        <h1 class=\"mb-3 text-center\"> {{ globalHeader | translate }} </h1>\r\n    </header>\r\n\r\n    <hr>\r\n\r\n    <div class=\"form-row mb-3\">\r\n\r\n        <!-- main combo -->\r\n        <div class=\"col-lg-3 col-md-4 my-2 my-md-0\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text\"> \r\n                        {{ 'course.filter' | translate }} \r\n                    </span>\r\n                </div>\r\n                <select #filterCombo class=\"form-control\" (change)=\"toggleFilter (filterCombo.value, '');\">\r\n                    <option value=\"all\" selected> {{ 'global.other.all' | translate }} </option>\r\n                    <option value=\"period\"> {{ 'course.period.period' | translate }} </option>\r\n                    <option value=\"name\"> {{ 'global.personal.name' | translate }} </option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- period combo -->\r\n        <div class=\"col-lg-2 col-md-3 my-2 my-md-0\" [hidden]=\"currentFilter !== 'period'\">\r\n            <select #periodCombo class=\"form-control\" (change)=\"toggleFilter ('period', periodCombo.value)\">\r\n                <option *ngFor=\"let period of timePeriods; let currentIndex = index;\" [value]=\"period\"> \r\n                    {{ periodDescriptions[currentIndex] | translate }} \r\n                </option>\r\n            </select>\r\n        </div>\r\n\r\n        <!-- name input -->\r\n        <div class=\"col-lg-9 col-md-8 my-2 my-md-0\" [hidden]=\"currentFilter !== 'name'\">\r\n            <div class=\"input-group\">\r\n                <input type=\"text\" class=\"form-control\" [placeholder]=\"'global.personal.name' | translate\" #nameInput>\r\n                <div class=\"input-group-append\">\r\n                    <button type=\"button\" class=\"btn btn-success\" (click)=\"toggleFilter ('name', nameInput.value)\"> \r\n                        {{ 'global.buttons.search' | translate }} \r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"records$ | async as courses; else spanLoading;\">\r\n        <div class=\"col-12\">\r\n            <div class=\"table-responsive\" *ngIf=\"!hasError && courses.length !== 0; else nothingFound\">\r\n                <table class=\"table table-striped table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\" *ngFor=\"let header of tableHeaders\"> \r\n                                {{ header | translate }}\r\n                            </th>\r\n                            <th class=\"text-center\" [colSpan]=\"containsProfile('ADMIN') ? 2 : 1\"> \r\n                                {{ 'course.classes.classes' | translate }} \r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let course of courses; let currentIndex = index;\">\r\n                            <td scope=\"row\">\r\n                                <div *ngIf=\"containsProfile('ADMIN')\">\r\n                                    <input type=\"radio\" name=\"id\" class=\"custom-radio\" (click)=\"toggleButtons (course)\">\r\n                                </div>\r\n                            </td>\r\n                            <td scope=\"row\"> {{ course.getName () }} </td>\r\n                            <td scope=\"row\"> \r\n                                {{ getTranslatedPeriod (course.getPeriod ()) | translate }} \r\n                            </td>\r\n                            <td scope=\"row\"> \r\n                                {{ getTranslatedCourseType (course.getType ()) | translate }} \r\n                            </td>\r\n                            <td scope=\"row\">\r\n                                <button type=\"button\" class=\"btn btn-outline-info\" (click)=\"showSchoolClasses (course)\"> \r\n                                    {{ 'course.classes.list' | translate }} \r\n                                </button>\r\n                            </td>\r\n                            <td scope=\"row\" *ngIf=\"containsProfile('ADMIN')\">\r\n                                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"showNewSchoolClass (course)\"> \r\n                                    {{ 'course.classes.new' | translate }} \r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <hr>\r\n\r\n    <!-- actions -->\r\n    <div class=\"row mt-2\" *ngIf=\"containsProfile ('ADMIN')\">\r\n        <div class=\"col-lg-2 col-sm-3 my-md-0 my-2\">\r\n            <button type=\"button\" class=\"btn btn-danger w-100\" (click)=\"onDelete ();\" [disabled]=\"!isSelected\"> \r\n                {{ 'global.buttons.delete' | translate }} \r\n            </button>\r\n        </div>\r\n        <div class=\"col-lg-2 col-md-3 col-sm-4 my-md-0 my-2\">\r\n            <button type=\"button\" class=\"btn btn-primary w-100\" (click)=\"showNewCourseModal();\"> \r\n                {{ 'global.buttons.new-course' | translate }} \r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #spanLoading>\r\n        <div class=\"bg-light p-3 text-center\">\r\n            <span *ngIf=\"!hasError; else spanError;\"> \r\n                {{ 'global.messages.loading' | translate }} \r\n                {{ 'global.menu-links.courses' | translate }} ... \r\n            </span>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template #spanError>\r\n        <span> {{ 'global.messages.system-error' | translate }} </span>\r\n        <button type=\"button\" class=\"btn btn-info mx-1\" (click)=\"onReload ()\"> \r\n            {{ 'global.buttons.reload' | translate }} \r\n        </button>\r\n    </ng-template>\r\n\r\n    <ng-template #nothingFound>\r\n        <div class=\"bg-light p-3 text-center\">\r\n            <span> {{ 'global.messages.nothing-found' | translate }} </span>\r\n        </div>\r\n    </ng-template>\r\n\r\n</article>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CoursesListComponent } from './courses-list/courses-list.component';\r\n\r\nconst ROUTES: Routes = [\r\n    { path: '', component: CoursesListComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild (ROUTES)],\r\n    exports: [RouterModule]\r\n})\r\nexport class CoursesRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { map, catchError, take, switchMap } from 'rxjs/operators';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ModalService } from 'src/app/services/modal.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\nimport { CourseService } from 'src/app/services/domain/course.service';\r\nimport { AuthenticationService } from 'src/app/services/authentication.service';\r\n\r\nimport { CourseDTO } from 'src/app/models/domain/dto/course.dto';\r\n\r\nimport { BaseTableComponent } from 'src/app/shared/list-table/base-table/base-table.component';\r\n\r\n@Component({\r\n  selector: 'app-courses-list',\r\n  templateUrl: './courses-list.component.html',\r\n  styles: ['.table-box { width: 120rem; }', '.container { max-width: 1200px; }']\r\n})\r\nexport class CoursesListComponent extends BaseTableComponent<CourseDTO> implements OnInit {\r\n\r\n  public currentFilter = 'all';\r\n  public timePeriods: string[] = [];\r\n  public periodDescriptions: string[] = [];\r\n  public isSelected = false;\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected modalService: ModalService,\r\n    protected storageService: StorageService,\r\n    private courseService: CourseService,\r\n    private authenticationService: AuthenticationService,\r\n  ) {\r\n    super(translateService, storageService, modalService);\r\n\r\n    // default values\r\n    this.globalHeader = 'global.menu-links.courses';\r\n    this.confirmBody = 'course.messages.confirmation';\r\n    this.tableHeaders = [\r\n      '', 'global.personal.name', 'course.period.period', 'course.type.type'\r\n    ];\r\n    this.timePeriods = this.courseService.listTimePeriods ();\r\n    this.periodDescriptions = this.courseService.getPeriodDescriptions ();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.onReload ();\r\n  }\r\n\r\n  public onUpdate(): void {}\r\n  public onReload(): void {\r\n    this.hasError = false;\r\n    this.records$ = this.loadData('ALL');\r\n  }\r\n\r\n  public onDelete(): void {\r\n    const result$ = this.modalService.showConfirm (this.modalTexts.confirm.title, this.modalTexts.confirm.body);\r\n    result$.asObservable ().pipe (\r\n      take (1),\r\n      switchMap (result => {\r\n        return (result ? this.courseService.deleteCourse (this.selectedModel.getId ()) : EMPTY);\r\n      })\r\n    ).subscribe (\r\n      () => {\r\n        this.isSelected = false;\r\n        this.records$ = this.loadData('ALL');\r\n        this.modalService.showAlertSuccess (this.modalTexts.success.title, this.modalTexts.success.body);\r\n      },\r\n      () => this.modalService.showAlertDanger (this.modalTexts.error.title, this.modalTexts.error.body),\r\n      () => result$.unsubscribe ()\r\n    );\r\n  }\r\n\r\n  protected loadData(filter?: string, value?: string): Observable<CourseDTO[]> {\r\n    switch (filter) {\r\n      case 'period': {\r\n        const url = this.courseService.protectedUrl + '/period';\r\n        return this.pipeFindAll(this.courseService.findByKeyAndValueWhereUrlIs('value', value, url));\r\n      }\r\n\r\n      case 'name': {\r\n        const url = this.courseService.protectedUrl + '/name';\r\n        return this.pipeFindAll(this.courseService.findByKeyAndValueWhereUrlIs('name', value, url));\r\n      }\r\n\r\n      case 'all': default: {\r\n        return this.pipeFindAll (this.courseService.findAll ());\r\n      }\r\n    }\r\n  }\r\n\r\n  protected pipeFindAll(observable: Observable<any>): Observable<CourseDTO[]> {\r\n    return observable.pipe (\r\n      map ((courses: CourseDTO[]) => {\r\n        return courses.map ((course) => {\r\n          this.hasError = false;\r\n          let dto = new CourseDTO ();\r\n          dto = Object.assign (dto, course);\r\n          return dto;\r\n        });\r\n      }),\r\n\r\n      catchError (() => {\r\n        this.hasError = true;\r\n        this.error$.next (true);\r\n        this.handleError (this.modalTexts.error.title, this.modalTexts.loading.body);\r\n        return EMPTY;\r\n      })\r\n    ) as Observable<CourseDTO[]>;\r\n  }\r\n\r\n  public toggleButtons(course: CourseDTO): void {\r\n    this.selectedModel = course;\r\n    this.isSelected = true;\r\n  }\r\n\r\n  public toggleFilter(filter: string, value?: string): void {\r\n    this.currentFilter = filter;\r\n    value = (filter === 'period' && value === '' ? 'Morning' : value);\r\n    this.records$ = this.loadData (filter, value);\r\n  }\r\n\r\n  public showSchoolClasses(course: CourseDTO): void {\r\n    this.modalService.showSchoolClass (course);\r\n  }\r\n\r\n  public showNewCourseModal(): void {\r\n    const result$ = this.modalService.showNewCourse ();\r\n    result$.asObservable ().pipe (take (1)).subscribe (\r\n      (result: boolean) => {\r\n        if (result) {\r\n          this.modalService.showAlertSuccess (this.modalTexts.success.title, 'course.messages.course-success');\r\n          this.records$ = this.loadData();\r\n        } else {\r\n          this.modalService.showAlertDanger (this.modalTexts.error.title, 'course.messages.course-error');\r\n        }\r\n      },\r\n      () => this.modalService.showAlertDanger (this.modalTexts.error.title, 'course.messages.course-error'),\r\n      () => result$.unsubscribe ()\r\n    );\r\n  }\r\n\r\n  public showNewSchoolClass(course: CourseDTO): void {\r\n    const result$ = this.modalService.showNewSchoolClass (course);\r\n    result$.asObservable ().subscribe (\r\n      (result: boolean) => {\r\n        if (result) {\r\n          this.modalService.showAlertSuccess (this.modalTexts.success.title, 'classes.messages.class-success');\r\n        } else {\r\n          this.modalService.showAlertDanger (this.modalTexts.error.title, 'classes.messages.class-error');\r\n        }\r\n      },\r\n      () => this.modalService.showAlertDanger (this.modalTexts.error.title, 'classes.messages.class-error'),\r\n      () => result$.unsubscribe ()\r\n    );\r\n  }\r\n\r\n  public getTranslatedPeriod(period: string): string {\r\n    return this.courseService.getTranslatedPeriod (period);\r\n  }\r\n\r\n  public getTranslatedCourseType(type: string): string {\r\n    return this.courseService.getTranslatedCourseType (type);\r\n  }\r\n\r\n  public containsProfile(profile: string): boolean {\r\n    return this.authenticationService.containsProfile (profile);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CoursesRoutingModule } from './courses-routing.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\nimport { CoursesListComponent } from './courses-list/courses-list.component';\r\nimport { CoursesFormComponent } from './courses-form/courses-form.component';\r\n\r\n@NgModule({\r\n  declarations: [CoursesListComponent, CoursesFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    CoursesRoutingModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class CoursesModule { }\r\n"]}