{"version":3,"sources":["webpack:///src/app/models/domain/dto/employee.dto.ts","webpack:///src/app/services/domain/employee.service.ts","webpack:///src/app/services/crud.service.ts","webpack:///src/app/models/domain/dto/person.dto.ts","webpack:///src/app/shared/base-form/base-form.component.ts","webpack:///src/app/shared/utils/input-mask.ts","webpack:///src/app/services/domain/student.service.ts","webpack:///src/app/models/domain/new-dto/meeting-schedule.new.dto.ts","webpack:///src/app/views/meeting-schedules/meeting-schedules-form/meeting-schedules-form.component.html","webpack:///src/app/views/meeting-schedules/meeting-schedules-form/meeting-schedules-form.component.ts","webpack:///src/app/services/domain/report.service.ts","webpack:///src/app/models/domain/dto/report.dto.ts","webpack:///src/app/services/domain/course.service.ts","webpack:///src/app/enums/time-period.enum.ts","webpack:///src/app/enums/course-type.enum.ts","webpack:///src/app/models/domain/dto/course.dto.ts","webpack:///src/app/enums/alert-types.enum.ts","webpack:///src/app/shared/modals/alert-modal/alert-modal.component.ts","webpack:///src/app/shared/modals/confirm-modal/confirm-modal.component.ts","webpack:///src/app/shared/modals/report-details-modal/report-details-modal.component.ts","webpack:///src/app/shared/modals/alert-modal/alert-modal.component.html","webpack:///src/app/shared/modals/confirm-modal/confirm-modal.component.html","webpack:///src/app/shared/modals/report-details-modal/report-details-modal.component.html","webpack:///src/app/shared/modals/validations-modal/validations-modal.component.html","webpack:///src/app/shared/modals/validations-modal/validations-modal.component.ts","webpack:///src/app/views/school-classes/school-classes-list/school-classes-list.component.html","webpack:///src/app/views/school-classes/school-classes-list/school-classes-list.component.ts","webpack:///src/app/shared/modals/wait-modal/wait-modal.component.ts","webpack:///src/app/shared/modals/wait-modal/wait-modal.component.html","webpack:///src/app/models/domain/new-dto/course.new.dto.ts","webpack:///src/app/views/courses/courses-form/courses-form.component.html","webpack:///src/app/views/courses/courses-form/courses-form.component.ts","webpack:///src/app/services/modal.service.ts","webpack:///src/app/views/school-classes/school-classes-form/school-classes-form.component.ts","webpack:///src/app/models/domain/new-dto/school-class.new.dto.ts","webpack:///src/app/views/school-classes/school-classes-form/school-classes-form.component.html","webpack:///src/app/models/domain/dto/student.dto.ts","webpack:///src/app/services/domain/meeting-schedule.service.ts","webpack:///src/app/models/domain/dto/school-class.dto.ts","webpack:///src/app/views/reports/reports-form/reports-form.component.ts","webpack:///src/app/views/reports/reports-form/reports-form.component.html","webpack:///src/app/shared/error-message/error-message.component.ts","webpack:///src/app/shared/error-message/error-message.component.html","webpack:///src/app/services/domain/school-class.service.ts","webpack:///src/app/shared/utils/form-validators.ts","webpack:///src/app/services/domain/person.service.ts"],"names":["EmployeeDTO","EmployeeService","httpClient","super","this","protectedUrl","API","adminUrl","listAll","params","url","key","value","findByKeyAndValueWhereUrlIs","email","findPersonByEmail","socialSecurityNumber","findPersonBySSN","employee","insertPerson","updatePerson","getId","CrudService","apiUrl","get","pipe","record","post","put","PersonDTO","profiles","id","name","type","imageUrl","BaseFormComponent","INPUT_MASKS","date","phoneNumber","number","zipCode","translateService","storageService","formBuilder","router","wasSubmitted","showModal","inputMasks","subscription$","Subscription","form","valid","submit","checkValidations","showValidationModal","currentForm","Object","keys","controls","forEach","field","control","markAsDirty","markAsTouched","errors","property","max","length","reset","hasError","StudentService","student","MeetingScheduleNewDTO","datetime","employeeId","studentId","MeetingSchedulesFormComponent","employeeService","studentService","meetingScheduleService","modalRef","employees","students","localUser","todayDate","Date","model","confirmResult","Subject","userType","assign","getLocalUser","getType","loadStudents","loadEmployees","buildForm","unsubscribe","insertMeetingSchedule","subscribe","response","hasOwnProperty","confirmAndClose","findAllEmployees","emps","map","dto","push","currentUserIndex","findIndex","e","findAllStudents","studs","group","toISOString","slice","required","patchValue","hide","next","onClose","onSubmit","ReportService","baseUrl","findUnique","scheduleId","report","insert","ReportDTO","title","content","emission","schedule","CourseService","TimePeriod","MORNING","AFTERNOON","EVENING","CourseType","TECHNICAL_COURSE","LICENTIATE","BACHELOR_DEGREE","periodDescriptions","courseTypeDescriptions","publicUrl","environment","_protectedUrl","append","course","periods","courseTypes","period","toLowerCase","index","indexOf","replace","CourseDTO","AlertModalComponent","ConfirmModalComponent","ReportDetailsModalComponent","AlertTypes","DANGER","SUCCESS","message","cancelButtonText","okButtonText","onConfirm","ValidationsModalComponent","fields","WaitModalComponent","SchoolClassesListComponent","schoolClassService","tableHeaders","globalHeader","currentCourse","records$","Observable","loadData","pipeFindAll","findAllByCourseAndName","observable","schoolClasses","schoolClass","catchError","localCourse","onReload","CourseNewDTO","CoursesFormComponent","ModalService","SchoolClassesFormComponent","courseService","timePeriods","confirmResult$","listTimePeriods","listCourseTypes","getPeriodDescriptions","getCourseTypeDescriptions","insertCourse","minLength","maxLength","getTranslatedPeriod","getTranslatedCourseType","SchoolClassNewDTO","start","end","courseId","bsDateConfig","isAnimated","errorMessage","getStart","getEnd","insertSchoolClass","courseName","getName","words","split","schoolClassName","word","charAt","toUpperCase","buildSchoolClassName","modalService","dismissTimeout","show","setTimeout","showAlert","body","employeeName","studentName","ignoreBackdropClick","setClass","keyboard","StudentDTO","birthdate","MeetingScheduleService","status","set","meetingSchedule","update","SchoolClassDTO","ReportsFormComponent","reportService","insertReport","localSchedule","getEmployee","getStudent","ErrorMessageComponent","translate","propertyName","dirty","getErrorMessage","label","SchoolClassService","FormValidators","otherField","formControl","Error","root","equalsTo","test","invalidZipCode","fieldName","validatorName","validatorValue","minlength","requiredLength","maxlength","PersonService","findUniqueByField","ssn","person","fileImage","formData","FormData","observe"],"mappings":"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","file":"x","sourcesContent":["import { PersonDTO } from './person.dto';\r\n\r\nexport class EmployeeDTO extends PersonDTO {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { PersonService } from './person.service';\r\n\r\nimport { EmployeeDTO } from 'src/app/models/domain/dto/employee.dto';\r\nimport { PersonDTO } from 'src/app/models/domain/dto/person.dto';\r\nimport { StudentDTO } from 'src/app/models/domain/dto/student.dto';\r\n\r\nimport { EmployeeNewDTO } from 'src/app/models/domain/new-dto/employee.new.dto';\r\nimport { PersonNewDTO } from 'src/app/models/domain/new-dto/person.new.dto';\r\nimport { StudentNewDTO } from 'src/app/models/domain/new-dto/student.new.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService extends PersonService {\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n    this.protectedUrl = `${environment.API}/v1/protected/employees`;\r\n    this.adminUrl = `${environment.API}/v1/admin/employees`;\r\n  }\r\n\r\n  public findAllEmployees():\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)[]> {\r\n    return this.listAll (this.protectedUrl);\r\n  }\r\n\r\n  public findAllByName(params: HttpParams):\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)[]> {\r\n    return this.listAll(`${this.protectedUrl}/name`, params);\r\n  }\r\n\r\n  public findByKeyAndValueWhereUrlIs(url, key, value):\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)> {\r\n    return this.findByKeyAndValueWhereUrlIs(url, key, value);\r\n  }\r\n\r\n  public findByEmail(email: string):\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)> {\r\n    return this.findPersonByEmail (`${this.adminUrl}/email`, email);\r\n  }\r\n\r\n  public findBySSN(socialSecurityNumber: string):\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)> {\r\n    return this.findPersonBySSN (`${this.adminUrl}/ssn`, socialSecurityNumber);\r\n  }\r\n\r\n  public insertEmployee(employee: EmployeeNewDTO): Observable<object> {\r\n    return this.insertPerson (`${this.adminUrl}`, employee);\r\n  }\r\n\r\n  public updateEmployee(employee: EmployeeDTO): Observable<object> {\r\n    return this.updatePerson (`${this.protectedUrl}/${employee.getId ()}`, employee);\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\n\r\nexport class CrudService<T> {\r\n\r\n  constructor(protected httpClient: HttpClient) { }\r\n\r\n  protected listAll(apiUrl: string, params?: HttpParams): Observable<T[]> {\r\n    return this.httpClient.get<T[]>(apiUrl, { params }).pipe (take (1));\r\n  }\r\n\r\n  protected findUnique(apiUrl: string, params?: HttpParams): Observable<T> {\r\n    return this.httpClient.get<T>(apiUrl, { params }).pipe (take (1));\r\n  }\r\n\r\n  protected insert(apiUrl: string, record: T): Observable<any> {\r\n    return this.httpClient.post (apiUrl, record).pipe (take (1));\r\n  }\r\n\r\n  protected update(apiUrl: string, record: T): Observable<any> {\r\n    return this.httpClient.put (apiUrl, record).pipe (take (1));\r\n  }\r\n\r\n  protected delete(apiUrl: string): Observable<any> {\r\n    return this.httpClient.delete (apiUrl).pipe (take (1));\r\n  }\r\n\r\n}\r\n","\r\nexport class PersonDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private email: string;\r\n    private type: string;\r\n    private profiles: string[] = [];\r\n    private imageUrl?: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getEmail(): string {\r\n        return this.email;\r\n    }\r\n\r\n    public setEmail(email: string) {\r\n        this.email = email;\r\n    }\r\n\r\n    public getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public getProfiles(): string[] {\r\n        return this.profiles;\r\n    }\r\n\r\n    public setProfiles(profiles: string[]) {\r\n        this.profiles = profiles;\r\n    }\r\n\r\n    public getImageUrl(): string {\r\n        return this.imageUrl;\r\n    }\r\n\r\n    public setImageUrl(imageUrl: string) {\r\n        this.imageUrl = imageUrl;\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, ValidationErrors } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { INPUT_MASKS } from '../utils/input-mask';\r\n\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\nimport { BaseTranslateComponent } from '../base-translate/base-translate.component';\r\n\r\n@Component({\r\n  selector: 'app-base-form',\r\n  template: '<div></div>',\r\n})\r\nexport abstract class BaseFormComponent<T> extends BaseTranslateComponent {\r\n\r\n  public form: FormGroup;\r\n  public wasSubmitted = false;\r\n  public showModal = false;\r\n  protected subscription$: Subscription;\r\n  public model: T;\r\n  public inputMasks = INPUT_MASKS;\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    protected formBuilder: FormBuilder,\r\n    protected router?: Router,\r\n  ) {\r\n    super(translateService, storageService);\r\n    this.subscription$ = new Subscription();\r\n  }\r\n\r\n  protected abstract submit(): void;\r\n  protected abstract showValidationModal(form: any): void;\r\n\r\n  public onSubmit(): void {\r\n\r\n    this.wasSubmitted = true;\r\n\r\n    if (this.form.valid) {\r\n      this.submit();\r\n    }\r\n    else {\r\n      this.checkValidations(this.form);\r\n\r\n      if (this.showModal) {\r\n        this.showValidationModal (this.form);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected checkValidations(currentForm: FormGroup | FormArray): void {\r\n    Object.keys(currentForm.controls).forEach(field => {\r\n      const control = currentForm.get(field);\r\n      control.markAsDirty();\r\n      control.markAsTouched();\r\n\r\n      if (control instanceof FormGroup || control instanceof FormArray) {\r\n        this.checkValidations(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  public checkIsValid(field: string): boolean {\r\n    const control = this.form.get(field);\r\n    return control ? control.valid : false;\r\n  }\r\n\r\n  public hasError(field: string): ValidationErrors {\r\n    const control = this.form.get(field);\r\n    return control ? control.errors : null;\r\n  }\r\n\r\n  public getField(field: string): FormArray {\r\n    const control = this.form.get(field);\r\n    return control ? control as FormArray : null;\r\n  }\r\n\r\n  public getFieldProperty(field: string, property: string): any {\r\n    const control = this.form.get(field);\r\n    return control ? control[property] : null;\r\n  }\r\n\r\n  public getCurrentValueLength(field: string, max: number): string {\r\n    const control = this.form.get(field);\r\n    return control ? `${control.value.length} / ${max}.` : '';\r\n  }\r\n\r\n  public resetForm(): void {\r\n    this.form.reset();\r\n  }\r\n\r\n  public buildValidationClass(field: string): object {\r\n    return {\r\n      'is-invalid': this.wasSubmitted && this.hasError(field),\r\n      'is-valid': this.wasSubmitted && !this.hasError(field)\r\n    };\r\n  }\r\n}\r\n","\r\nexport const INPUT_MASKS = {\r\n    socialSecurityNumber: '000-00-0000',\r\n    date: '00/00/0000',\r\n    phoneNumber: '000-000-0000',\r\n    number: '0?0?0?0?0?',\r\n    zipCode: '00000',\r\n};","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { PersonService } from './person.service';\r\n\r\nimport { StudentNewDTO } from 'src/app/models/domain/new-dto/student.new.dto';\r\nimport { StudentDTO } from 'src/app/models/domain/dto/student.dto';\r\nimport { Observable } from 'rxjs';\r\nimport { PersonDTO } from 'src/app/models/domain/dto/person.dto';\r\nimport { EmployeeDTO } from 'src/app/models/domain/dto/employee.dto';\r\nimport { PersonNewDTO } from 'src/app/models/domain/new-dto/person.new.dto';\r\nimport { EmployeeNewDTO } from 'src/app/models/domain/new-dto/employee.new.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudentService extends PersonService {\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n    this.protectedUrl = `${environment.API}/v1/protected/students`;\r\n  }\r\n\r\n  public findAllStudents() {\r\n    return this.listAll (this.protectedUrl);\r\n  }\r\n\r\n  public findAllByName(params: HttpParams) {\r\n    return this.listAll (`${this.protectedUrl}/name`, params);\r\n  }\r\n\r\n  public findByKeyAndValueWhereUrlIs(url, key, value):\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)> {\r\n    return this.findByKeyAndValueWhereUrlIs(url, key, value);\r\n  }\r\n\r\n  public findByEmail(email: string) {\r\n    return this.findPersonByEmail (`${this.protectedUrl}/email`, email);\r\n  }\r\n\r\n  public findBySSN(socialSecurityNumber: string) {\r\n    return this.findPersonBySSN (`${this.protectedUrl}/ssn`, socialSecurityNumber);\r\n  }\r\n\r\n  public insertStudent(student: StudentNewDTO) {\r\n    return this.insertPerson (`${environment.API}/v1/public/students`, student);\r\n  }\r\n\r\n  public updateStudent(student: StudentDTO) {\r\n    return this.updatePerson (`${this.protectedUrl}/${student.getId ()}`, student);\r\n  }\r\n}\r\n","\r\nexport class MeetingScheduleNewDTO {\r\n\r\n    private id: number;\r\n    private datetime: Date;\r\n    private employeeId: number;\r\n    private studentId: number;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getDatetime(): Date {\r\n        return this.datetime;\r\n    }\r\n\r\n    public setDatetime(datetime: Date) {\r\n        this.datetime = datetime;\r\n    }\r\n\r\n    public getEmployeeId(): number {\r\n        return this.employeeId;\r\n    }\r\n\r\n    public setEmployeeId(employeeId: number) {\r\n        this.employeeId = employeeId;\r\n    }\r\n\r\n    public getStudentId(): number {\r\n        return this.studentId;\r\n    }\r\n\r\n    public setStudentId(studentId: number) {\r\n        this.studentId = studentId;\r\n    }\r\n}\r\n","\r\n<!-- meeting schedule form -->\r\n<section class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\r\n\r\n    <!-- header -->\r\n    <div class=\"modal-header\">\r\n        <header>\r\n            <h2 class=\"modal-title\">\r\n                {{ 'global.buttons.new-meeting-schedule' | translate }}\r\n            </h2>\r\n        </header>\r\n        \r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose ();\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n\r\n    <!-- body -->\r\n    <div class=\"modal-body\">\r\n        <form class=\"needs-validation\" novalidate [formGroup]=\"form\" (ngSubmit)=\"onSubmit ()\">\r\n            <div>\r\n                <div class=\"row my-2\">\r\n\r\n                    <!-- employee -->\r\n                    <div class=\"col-md-6\">\r\n                        <div *ngIf=\"userType === 'Employee'; else employeeSelect\">\r\n                            <input type=\"text\" class=\"form-control font-weight-bold\" readonly disabled\r\n                            [value]=\"employees[currentUserIndex]?.getName ()\"\r\n                            [title]=\"employees[currentUserIndex]?.getName ()\">\r\n                        </div>\r\n                        \r\n                        <ng-template #employeeSelect>\r\n                            <select class=\"form-control\" formControlName=\"employeeId\" [ngClass]=\"buildValidationClass ('employeeId')\">\r\n                                <option [value]=\"null\">\r\n                                    * {{ 'meeting-schedules.employee' | translate }}\r\n                                </option>\r\n                                <option *ngFor=\"let employee of employees;\" \r\n                                        [value]=\"employee.getId ()\" [title]=\"employee.getName()\">\r\n                                    {{ employee.getName () }}\r\n                                </option>\r\n                            </select>\r\n                            <app-error-message [control]=\"form.get ('employeeId')\" [label]=\"'meeting-schedules.employee' | translate\">\r\n                            </app-error-message>\r\n                        </ng-template>\r\n                    </div>\r\n\r\n                    <!-- student -->\r\n                    <div class=\"col-md-6\">\r\n                        <div *ngIf=\"userType === 'Student'; else studentSelect\">\r\n                            <input type=\"text\" class=\"form-control font-weight-bold\" readonly disabled \r\n                            [value]=\"students[currentUserIndex]?.getName ()\"\r\n                            [title]=\"students[currentUserIndex]?.getName ()\">\r\n                        </div>\r\n\r\n                        <ng-template #studentSelect>\r\n                            <select class=\"form-control\" formControlName=\"studentId\" [ngClass]=\"buildValidationClass ('studentId')\">\r\n                                <option [value]=\"null\">\r\n                                    * {{ 'meeting-schedules.student' | translate }}\r\n                                </option>\r\n                                <option *ngFor=\"let student of students;\" \r\n                                        [value]=\"student.getId ()\" [title]=\"student.getName()\">\r\n                                    {{ student.getName () }}\r\n                                </option>\r\n                            </select>\r\n                            <app-error-message [control]=\"form.get ('studentId')\" [label]=\"'meeting-schedules.student' | translate\">\r\n                            </app-error-message>\r\n                        </ng-template>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- datetime -->\r\n                <div class=\"row my-2\">\r\n                    <div class=\"col-12\">\r\n                        <input type=\"datetime-local\" class=\"form-control\" #datetimeInput formControlName=\"datetime\" \r\n                               [ngClass]=\"buildValidationClass ('datetime')\"\r\n                               [min]=\"todayDate.toISOString ().slice (0, 16)\" [value]=\"todayDate.toISOString ().slice (0, 16)\">\r\n                        <app-error-message [control]=\"form.get ('datetime')\" [label]=\"'meeting-schedules.datetime' | translate\">\r\n                        </app-error-message>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row my-2\">\r\n                    <div class=\"col-12\">\r\n                        <label class=\"required-label\"> \r\n                            (*) {{ 'global.required-fields' | translate }} \r\n                        </label>\r\n                        <button type=\"submit\" class=\"d-none\" #buttonSubmit> Submit </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n    <!-- footer -->\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger float-left\" data-dismiss=\"modal\" (click)=\"onClose ();\">\r\n            {{ 'global.buttons.cancel' | translate }} \r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-success float-right\" (click)=\"buttonSubmit.click ()\">\r\n            {{ 'global.buttons.submit' | translate }} \r\n        </button>\r\n    </div>\r\n</section>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { EmployeeService } from 'src/app/services/domain/employee.service';\r\nimport { StudentService } from 'src/app/services/domain/student.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\nimport { MeetingScheduleService } from 'src/app/services/domain/meeting-schedule.service';\r\n\r\nimport { MeetingScheduleNewDTO } from 'src/app/models/domain/new-dto/meeting-schedule.new.dto';\r\nimport { EmployeeDTO } from 'src/app/models/domain/dto/employee.dto';\r\nimport { StudentDTO } from 'src/app/models/domain/dto/student.dto';\r\nimport { LocalUser } from 'src/app/models/local-user';\r\n\r\nimport { BaseFormComponent } from 'src/app/shared/base-form/base-form.component';\r\n\r\n@Component({\r\n  selector: 'app-meeting-schedules-form',\r\n  templateUrl: './meeting-schedules-form.component.html',\r\n})\r\nexport class MeetingSchedulesFormComponent extends BaseFormComponent<MeetingScheduleNewDTO> implements OnInit, OnDestroy {\r\n\r\n  public employees: EmployeeDTO[] = [];\r\n  public students: StudentDTO[] = [];\r\n  public userType: string;\r\n  public currentUserIndex: number;\r\n  private localUser = new LocalUser();\r\n  public confirmResult: Subject<boolean>;\r\n  public todayDate = new Date ();\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    protected formBuilder: FormBuilder,\r\n    private employeeService: EmployeeService,\r\n    private studentService: StudentService,\r\n    private meetingScheduleService: MeetingScheduleService,\r\n    private modalRef: BsModalRef,\r\n  ) {\r\n    super(translateService, storageService, formBuilder);\r\n\r\n    this.model = new MeetingScheduleNewDTO ();\r\n    this.showModal = false;\r\n    this.confirmResult = new Subject ();\r\n    this.userType = 'Employee';\r\n\r\n    Object.assign(this.localUser, storageService.getLocalUser());\r\n    this.userType = this.localUser.getType();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadStudents();\r\n    this.loadEmployees();\r\n    this.form = this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription$.unsubscribe();\r\n  }\r\n\r\n  protected showValidationModal(form: any): void {}\r\n  protected submit(): void {\r\n    this.model = Object.assign (this.model, this.form.value) as MeetingScheduleNewDTO;\r\n    this.subscription$ = this.meetingScheduleService.insertMeetingSchedule (this.model).subscribe (\r\n      (response) => {\r\n        if (response && response.hasOwnProperty ('error')) {\r\n          this.confirmAndClose (false);\r\n          return;\r\n        }\r\n\r\n        this.confirmAndClose (true);\r\n      },\r\n      () => this.confirmAndClose (false)\r\n    );\r\n  }\r\n\r\n  private loadEmployees(): void {\r\n    this.subscription$ = this.employeeService.findAllEmployees().subscribe(\r\n      (emps: EmployeeDTO[]) => {\r\n        emps.map(employee => {\r\n          let dto = new EmployeeDTO();\r\n          dto = Object.assign(dto, employee);\r\n          this.employees.push(dto);\r\n        });\r\n\r\n        if (this.userType === 'Employee') {\r\n          this.currentUserIndex = this.employees.findIndex (e => e.getId () === this.localUser.getId ());\r\n        }\r\n      },\r\n      () => this.employees = []\r\n    );\r\n  }\r\n\r\n  private loadStudents(): void {\r\n    this.subscription$ = this.studentService.findAllStudents().subscribe(\r\n      (studs: StudentDTO[]) => {\r\n        studs.map(student => {\r\n          let dto = new StudentDTO();\r\n          dto = Object.assign(dto, student);\r\n          this.students.push(dto);\r\n        });\r\n\r\n        if (this.userType === 'Student') {\r\n          this.currentUserIndex = this.students.findIndex (student => student.getId () === this.localUser.getId ());\r\n        }\r\n      },\r\n      () => this.students = []\r\n    );\r\n  }\r\n\r\n  private buildForm(): FormGroup {\r\n    this.form = this.formBuilder.group({\r\n      id: [null],\r\n      datetime: [this.todayDate.toISOString ().slice (0, 16), [Validators.required]],\r\n      employeeId: [null, [Validators.required]],\r\n      studentId: [null, [Validators.required]],\r\n    });\r\n\r\n    if (this.userType === 'Employee') {\r\n      this.form.patchValue({ employeeId: this.localUser.getId() });\r\n    }\r\n    else if (this.userType === 'Student') {\r\n      this.form.patchValue({ studentId: this.localUser.getId() });\r\n    }\r\n\r\n    return this.form;\r\n  }\r\n\r\n  private confirmAndClose(value?: boolean): void {\r\n    this.modalRef.hide ();\r\n\r\n    if (value != null) {\r\n      this.confirmResult.next (value);\r\n    }\r\n  }\r\n\r\n  public onClose(): void {\r\n    this.confirmAndClose (null);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from 'src/app/services/crud.service';\r\n\r\nimport { ReportDTO } from 'src/app/models/domain/dto/report.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReportService extends CrudService<ReportDTO> {\r\n\r\n  private baseUrl: string;\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n    this.baseUrl = environment.API + '/v1/protected/reports';\r\n  }\r\n\r\n  public findById(id: number): Observable<ReportDTO> {\r\n    return this.findUnique (`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  public findBySchedule(scheduleId: number): Observable<ReportDTO> {\r\n    return this.findUnique (`${this.baseUrl}/schedule/${scheduleId}`);\r\n  }\r\n\r\n  public findAllByEmployee(employeeId: number): Observable<ReportDTO[]> {\r\n    return this.listAll (`${this.baseUrl}/employee/${employeeId}`);\r\n  }\r\n\r\n  public findAllByStudent(studentId: number): Observable<ReportDTO[]> {\r\n    return this.listAll (`${this.baseUrl}/student/${studentId}`);\r\n  }\r\n\r\n  public insertReport(report: ReportDTO): Observable<object> {\r\n    return this.insert (`${this.baseUrl}`, report);\r\n  }\r\n}\r\n","import { MeetingScheduleDTO } from './meeting-schedule.dto';\r\n\r\nexport class ReportDTO {\r\n\r\n    private id: number;\r\n    private title: string;\r\n    private content: string;\r\n    private emission: Date;\r\n    private schedule: MeetingScheduleDTO;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getTitle(): string {\r\n        return this.title;\r\n    }\r\n\r\n    public setTitle(title: string) {\r\n        this.title = title;\r\n    }\r\n\r\n    public getContent(): string {\r\n        return this.content;\r\n    }\r\n\r\n    public setContent(content: string) {\r\n        this.content = content;\r\n    }\r\n\r\n    public getEmission(): Date {\r\n        return this.emission;\r\n    }\r\n\r\n    public setEmission(emission: Date) {\r\n        this.emission = emission;\r\n    }\r\n\r\n    public getSchedule(): MeetingScheduleDTO {\r\n        return this.schedule;\r\n    }\r\n\r\n    public setSchedule(schedule: MeetingScheduleDTO) {\r\n        this.schedule = schedule;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from 'src/app/services/crud.service';\r\n\r\nimport { TimePeriod } from 'src/app/enums/time-period.enum';\r\nimport { CourseType } from 'src/app/enums/course-type.enum';\r\n\r\nimport { CourseDTO } from 'src/app/models/domain/dto/course.dto';\r\nimport { CourseNewDTO } from 'src/app/models/domain/new-dto/course.new.dto';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseService extends CrudService<CourseDTO | CourseNewDTO> {\r\n\r\n  private periodDescriptions: string[] = [\r\n    'course.period.morning',\r\n    'course.period.afternoon',\r\n    'course.period.evening'\r\n  ];\r\n\r\n  private courseTypeDescriptions: string[] = [\r\n    'course.type.technical-course',\r\n    'course.type.licentiate',\r\n    'course.type.bachelor-degree'\r\n  ];\r\n\r\n  private publicUrl: string;\r\n  private _protectedUrl: string;\r\n  private adminUrl: string;\r\n\r\n  public get protectedUrl() {\r\n    return this._protectedUrl;\r\n  }\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n    this.publicUrl = `${environment.API}/v1/public/courses`;\r\n    this._protectedUrl = `${environment.API}/v1/protected/courses`;\r\n    this.adminUrl = `${environment.API}/v1/admin/courses`;\r\n  }\r\n\r\n  public findAll(): Observable<(CourseDTO | CourseNewDTO)[]> {\r\n    return this.listAll(this.publicUrl);\r\n  }\r\n\r\n  public findByKeyAndValueWhereUrlIs(key: string, value: string, url: string):\r\n        Observable<(CourseDTO | CourseNewDTO)[]> {\r\n    let params = new HttpParams();\r\n    params = params.append(key, value);\r\n    return this.listAll(url, params);\r\n  }\r\n\r\n  public insertCourse(course: CourseNewDTO): Observable<object> {\r\n    return this.insert(this.adminUrl, course);\r\n  }\r\n\r\n  public deleteCourse(id: number): Observable<object> {\r\n    return this.delete(`${this.adminUrl}/${id}`);\r\n  }\r\n\r\n  public listTimePeriods(): string[] {\r\n    const periods: string[] = [];\r\n\r\n    for (const value in TimePeriod) {\r\n      if (TimePeriod.hasOwnProperty (value)) {\r\n        periods.push (TimePeriod[value]);\r\n      }\r\n    }\r\n\r\n    return periods;\r\n  }\r\n\r\n  public listCourseTypes(): string[] {\r\n    const courseTypes: string[] = [];\r\n\r\n    for (const value in CourseType) {\r\n      if (CourseType.hasOwnProperty (value)) {\r\n        courseTypes.push (CourseType[value]);\r\n      }\r\n    }\r\n\r\n    return courseTypes;\r\n  }\r\n\r\n  public getPeriodDescriptions(): string[] {\r\n    return this.periodDescriptions;\r\n  }\r\n\r\n  public getCourseTypeDescriptions(): string[] {\r\n    return this.courseTypeDescriptions;\r\n  }\r\n\r\n  public getTranslatedPeriod(period: string): string {\r\n    const key = `course.period.${period.toLowerCase ()}`;\r\n    const index = this.periodDescriptions.indexOf (key);\r\n    return this.periodDescriptions[index];\r\n  }\r\n\r\n  public getTranslatedCourseType(type: string): string {\r\n    if (!type || type === '') {\r\n      return null;\r\n    }\r\n\r\n    type = type.replace (' ', '-');\r\n    const key = `course.type.${type.toLowerCase ()}`;\r\n    const index = this.courseTypeDescriptions.indexOf (key);\r\n    return this.courseTypeDescriptions[index];\r\n  }\r\n}\r\n","\r\nexport enum TimePeriod {\r\n\r\n    MORNING = 'Morning',\r\n    AFTERNOON = 'Afternoon',\r\n    EVENING = 'Evening',\r\n}\r\n","\r\nexport enum CourseType {\r\n\r\n    TECHNICAL_COURSE = 'Technical Course',\r\n    LICENTIATE = 'Licentiate',\r\n    BACHELOR_DEGREE = 'Bachelor Degree',\r\n}\r\n","\r\nexport class CourseDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private period: string;\r\n    private type: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getPeriod(): string {\r\n        return this.period;\r\n    }\r\n\r\n    public setPeriod(period: string) {\r\n        this.period = period;\r\n    }\r\n\r\n    public getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.type = type;\r\n    }\r\n}\r\n","\r\nexport enum AlertTypes {\r\n    DANGER = 'alert-danger',\r\n    SUCCESS = 'alert-success',\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\n@Component({\r\n  selector: 'app-alert-modal',\r\n  templateUrl: './alert-modal.component.html'\r\n})\r\nexport class AlertModalComponent implements OnInit {\r\n\r\n  @Input() public type = 'alert-success';\r\n  @Input() public title = 'title';\r\n  @Input() public message = 'message';\r\n\r\n  constructor(private modalRef: BsModalRef) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  public onClose(): void {\r\n    this.modalRef.hide ();\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\n@Component({\r\n  selector: 'app-confirm-modal',\r\n  templateUrl: './confirm-modal.component.html',\r\n})\r\nexport class ConfirmModalComponent implements OnInit {\r\n\r\n  @Input() public title: string;\r\n  @Input() public body: string;\r\n  @Input() public cancelButtonText: string;\r\n  @Input() public okButtonText: string;\r\n\r\n  public confirmResult: Subject<boolean>;\r\n\r\n  constructor(public modalRef: BsModalRef) {\r\n    this.cancelButtonText = 'global.buttons.no';\r\n    this.okButtonText = 'global.buttons.yes';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.confirmResult = new Subject ();\r\n  }\r\n\r\n  private confirmAndClose(value: boolean): void {\r\n    this.modalRef.hide ();\r\n    this.confirmResult.next (value);\r\n  }\r\n\r\n  public onClose(): void {\r\n    this.confirmAndClose (false);\r\n  }\r\n\r\n  public onConfirm(): void {\r\n    this.confirmAndClose (true);\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { ReportDetails } from 'src/app/models/report-detail';\r\n\r\n@Component({\r\n  selector: 'app-details-modal',\r\n  templateUrl: './report-details-modal.component.html',\r\n})\r\nexport class ReportDetailsModalComponent implements OnInit {\r\n\r\n  @Input() public employeeName: string;\r\n  @Input() public studentName: string;\r\n  @Input() public title: string;\r\n  @Input() public content: string;\r\n  @Input() public emission: Date;\r\n  @Input() public scheduleDate: Date;\r\n\r\n  constructor(public modalRef: BsModalRef) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  public onClose(): void {\r\n    this.modalRef.hide ();\r\n  }\r\n}\r\n","\r\n<!-- alert modal -->\r\n<div class=\"alert {{ type }} no-margin mb-0\" role=\"alert\">\r\n    <div>\r\n        <span class=\"font-weight-bold\"> \r\n            {{ title | translate }} \r\n        </span>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" (click)=\"onClose ();\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n\r\n    <hr>\r\n\r\n    <p [innerHtml]=\"message | translate\"></p>\r\n</div>\r\n","<!-- modal -->\r\n<div class=\"modal-content\">\r\n    <div class=\"modal-header\">\r\n        <header>\r\n            <h5 class=\"modal-title\">\r\n                {{ title | translate }} \r\n            </h5>\r\n        </header>\r\n        \r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modalRef.hide ();\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <p> {{ body | translate }} </p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\" (click)=\"onClose ();\"> \r\n            {{ cancelButtonText | translate }} \r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-success\" (click)=\"onConfirm ();\"> \r\n            {{ okButtonText | translate}} \r\n        </button>\r\n    </div>\r\n</div>","\r\n<!-- report modal -->\r\n<div class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\r\n\r\n    <!-- header -->\r\n    <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modalRef.hide ()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n    </div>\r\n\r\n    <!-- body -->\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-12 text-center\">\r\n                <header>\r\n                    <h2> {{ title }} </h2>\r\n                </header>\r\n                <hr>\r\n            </div>\r\n            <div class=\"col-12\">\r\n                {{ employeeName }}\r\n                <span class=\"font-weight-bold\"> {{ ('report.about' | translate).toLowerCase() }} </span> \r\n                {{ studentName }}\r\n                <hr>\r\n            </div>\r\n            <div class=\"col-12 overflow-auto\" style=\"max-height: 12rem;\">\r\n                <p> {{ content }} </p>\r\n                <hr>\r\n            </div>\r\n            <div class=\"col-12\">\r\n                <p class=\"font-italic float-right\">\r\n                    {{ 'report.issued-in' | translate }} {{ emission | date }}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- footer -->\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\" (click)=\"onClose ();\">\r\n            {{ 'global.buttons.close' | translate }} \r\n        </button>\r\n    </div>\r\n</div>\r\n","\r\n<!-- vlidations modal -->\r\n<div class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\r\n\r\n    <!-- header -->\r\n    <div class=\"modal-header\">\r\n        <header>\r\n            <h5 class=\"modal-title\"> \r\n                {{ 'modal.titles.required-title' | translate }} \r\n            </h5>\r\n        </header>\r\n        \r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose ();\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n    </div>\r\n\r\n    <!-- body -->\r\n    <div class=\"modal-body overflow-auto\" style=\"max-height: 20rem;\">\r\n        <p *ngFor=\"let field of fields;\">\r\n            {{ field }}\r\n        </p>\r\n    </div>\r\n\r\n    <!-- footer -->\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" (click)=\"onClose ();\"> \r\n            OK \r\n        </button>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\n@Component({\r\n  selector: 'app-validations-modal',\r\n  templateUrl: './validations-modal.component.html'\r\n})\r\nexport class ValidationsModalComponent implements OnInit {\r\n\r\n  @Input() public fields: string[] = [];\r\n\r\n  constructor(public modalRef: BsModalRef) { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  public onClose(): void {\r\n    this.modalRef.hide ();\r\n  }\r\n}\r\n","\r\n<!-- school classes list -->\r\n<article class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\r\n\r\n    <!-- header -->\r\n    <div class=\"modal-header\">\r\n        <header>\r\n            <h2 class=\"modal-title\"> {{ globalHeader | translate }} </h2>\r\n        </header>\r\n        \r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n    </div>\r\n\r\n    <!-- body -->\r\n    <div class=\"modal-body\">\r\n\r\n        <!-- name input -->\r\n        <div class=\"row mb-3\">\r\n            <div class=\"col-12 my-md-0 my-2\">\r\n                <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [placeholder]=\"'global.personal.name' | translate\" #nameInput>\r\n                    <div class=\"input-group-append\">\r\n                        <button type=\"button\" class=\"btn btn-success\" (click)=\"onReload (currentCourse, nameInput.value)\"> \r\n                            {{ 'global.buttons.search' | translate }} \r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        <div class=\"row\" *ngIf=\"records$ | async as schoolClasses; else spanLoading;\">\r\n            <div class=\"col-12\">\r\n                <div class=\"table-responsive\" *ngIf=\"!hasError && schoolClasses.length !== 0; else nothingFound\">\r\n                    <table class=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\" *ngFor=\"let header of tableHeaders\"> \r\n                                    {{ header | translate }}\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let schoolClass of schoolClasses; let currentIndex = index;\">\r\n                                <td scope=\"row\"> {{ currentIndex + 1 }} </td>\r\n                                <td scope=\"row\"> {{ schoolClass.getName () }} </td>\r\n                                <td scope=\"row\"> {{ schoolClass.getStart () | date }} </td>\r\n                                <td scope=\"row\"> {{ schoolClass.getEnd () | date }} </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        <ng-template #spanLoading>\r\n            <div class=\"bg-light p-3 text-center\">\r\n                <span *ngIf=\"!hasError; else spanError;\"> \r\n                    {{ 'global.messages.loading' | translate }}\r\n                    {{ 'course.classes.classes' | translate }} ... \r\n                </span>\r\n            </div>\r\n        </ng-template>\r\n    \r\n        <ng-template #spanError>\r\n            <span> {{ 'global.messages.system-error' | translate }} </span>\r\n            <button type=\"button\" class=\"btn btn-info mx-1\" (click)=\"onReload (currentCourse, '')\">\r\n                {{ 'global.buttons.reload' | translate }} \r\n            </button>\r\n        </ng-template>\r\n    \r\n        <ng-template #nothingFound>\r\n            <div class=\"bg-light p-3 text-center\">\r\n                <span> {{ 'global.messages.nothing-found' | translate }} </span>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n\r\n    <!-- footer -->\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\" (click)=\"onClose ()\">\r\n            {{ 'global.buttons.close' | translate }} \r\n        </button>\r\n    </div>\r\n</article>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\nimport { SchoolClassService } from 'src/app/services/domain/school-class.service';\r\n\r\nimport { SchoolClassDTO } from 'src/app/models/domain/dto/school-class.dto';\r\nimport { CourseDTO } from 'src/app/models/domain/dto/course.dto';\r\n\r\nimport { BaseTranslateComponent } from 'src/app/shared/base-translate/base-translate.component';\r\n\r\n@Component({\r\n  selector: 'app-school-classes-list',\r\n  templateUrl: './school-classes-list.component.html',\r\n})\r\nexport class SchoolClassesListComponent extends BaseTranslateComponent implements OnInit {\r\n\r\n  public tableHeaders: string[] = [\r\n    '#', 'global.personal.name', 'classes.start', 'classes.end'\r\n  ];\r\n  public globalHeader = 'course.classes.classes';\r\n  public records$: Observable<SchoolClassDTO[]>;\r\n  public hasError = false;\r\n  public currentCourse = new CourseDTO ();\r\n\r\n  @Input('course') public set course(localCourse: CourseDTO) {\r\n    this.currentCourse = localCourse;\r\n    this.onReload (this.currentCourse, '');\r\n  }\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    private schoolClassService: SchoolClassService,\r\n    private modalRef: BsModalRef,\r\n  ) {\r\n    super(translateService, storageService);\r\n    this.records$ = new Observable();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  public onUpdate(): void {}\r\n  public onReload(course: CourseDTO, name: string): void {\r\n    this.hasError = false;\r\n    this.records$ = this.loadData(course, name);\r\n  }\r\n\r\n  protected loadData(course: CourseDTO, name: string): Observable<SchoolClassDTO[]> {\r\n    return this.pipeFindAll (this.schoolClassService.findAllByCourseAndName (course.getId (), name));\r\n  }\r\n\r\n  protected pipeFindAll(observable: Observable<any>): Observable<SchoolClassDTO[]> {\r\n    return observable.pipe (\r\n      map ((schoolClasses: SchoolClassDTO[]) => {\r\n        return schoolClasses.map (schoolClass => {\r\n          let dto = new SchoolClassDTO ();\r\n          dto = Object.assign (dto, schoolClass);\r\n          return dto;\r\n        });\r\n      }),\r\n\r\n      catchError (() => {\r\n        this.hasError = true;\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  public onClose(): void {\r\n    this.modalRef.hide ();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-wait-modal',\r\n  templateUrl: './wait-modal.component.html'\r\n})\r\nexport class WaitModalComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","\r\n<!-- wait modal -->\r\n<div class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"modal-body alert-info\">\r\n        <header>\r\n            <h2 class=\"text-center\"> \r\n                {{ 'modal.messages.please-wait' | translate }} \r\n            </h2>\r\n        </header>\r\n    </div>\r\n</div>","\r\nexport class CourseNewDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private period: string;\r\n    private type: string;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getPeriod(): string {\r\n        return this.period;\r\n    }\r\n\r\n    public setPeriod(period: string) {\r\n        this.period = period;\r\n    }\r\n\r\n    public getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.type = type;\r\n    }\r\n}\r\n","\n<!-- courses form -->\n<section class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\n\n    <!-- header -->\n    <div class=\"modal-header\">\n        <header>\n            <h2 class=\"modal-title\"> \n                {{ 'global.buttons.new-course' | translate  }} \n            </h2>\n        </header>\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose();\">\n            <span aria-hidden=\"true\">&times;</span>\n        </button>\n    </div>\n\n    <!-- body -->\n    <div class=\"modal-body\">\n        <form class=\"needs-validation\" novalidate [formGroup]=\"form\" (ngSubmit)=\"onSubmit ();\">\n            \n            <!-- name -->\n            <div class=\"row\">\n                <div class=\"col-12 my-md-0 my-2\">\n                    <input type=\"text\" class=\"form-control\" minlength=\"5\" maxlength=\"120\"\n                           [placeholder]=\"' * ' + ('global.personal.name' | translate)\" #courseNameInput\n                           formControlName=\"name\" [ngClass]=\"buildValidationClass ('name')\">\n\n                        <small class=\"text-muted\">\n                        {{ 'global.other.needed' | translate }} {{ 'global.other.from' | translate }} \n                        {{ courseNameInput.minLength }}\n                        {{ 'global.other.to' | translate }} {{ courseNameInput.maxLength }}\n                        {{ 'global.validations-messages.characters' | translate }}\n                        </small>\n                    \n                    <app-error-message [control]=\"form.get ('name')\" [label]=\"'global.personal.name' | translate\">\n                    </app-error-message>\n                </div>\n            </div>\n            <div class=\"row\">\n\n                <!-- period -->\n                <div class=\"col-md-4 my-md-0 my-2\">\n                    <select class=\"form-control\" formControlName=\"period\" [ngClass]=\"buildValidationClass ('period')\">\n                        <option [value]=\"null\"> \n                            * {{ 'course.type.type' | translate }}  \n                        </option>\n                        <option *ngFor=\"let period of timePeriods\" [value]=\"period\"> \n                            {{ getTranslatedPeriod (period) | translate }} \n                        </option>\n                    </select>\n\n                    <app-error-message [control]=\"form.get ('period')\" [label]=\"'course.period.period' | translate\">\n                    </app-error-message>\n                </div>\n\n                <!-- type -->\n                <div class=\"col-md-8 my-md-0 my-2\">\n                    <select class=\"form-control\" formControlName=\"type\" [ngClass]=\"buildValidationClass ('period')\">\n                        <option [value]=\"null\">\n                            * {{ 'course.period.period' | translate }}\n                        </option>\n                        <option *ngFor=\"let type of courseTypes\" [value]=\"type\">\n                            {{ getTranslatedCourseType (type) | translate }}\n                        </option>\n                    </select>\n\n                    <app-error-message [control]=\"form.get ('type')\" [label]=\"'course.type.type' | translate\">\n                    </app-error-message>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"required-label\"> (*) {{ 'global.required-fields' | translate }} </label>\n                    <button type=\"submit\" class=\"d-none\" #buttonSubmit> Submit </button>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <!-- footer -->\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-danger float-left\" data-dismiss=\"modal\" (click)=\"onClose ();\"> \n            {{ 'global.buttons.cancel' | translate }} \n        </button>\n        <button type=\"button\" class=\"btn btn-success float-right\" (click)=\"buttonSubmit.click ()\"> \n            {{ 'global.buttons.submit' | translate }} \n        </button>\n    </div>\n</section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { CourseService } from 'src/app/services/domain/course.service';\nimport { StorageService } from 'src/app/services/storage.service';\n\nimport { CourseNewDTO } from 'src/app/models/domain/new-dto/course.new.dto';\n\nimport { BaseFormComponent } from 'src/app/shared/base-form/base-form.component';\n\n@Component({\n  selector: 'app-courses-form',\n  templateUrl: './courses-form.component.html'\n})\nexport class CoursesFormComponent extends BaseFormComponent<CourseNewDTO> implements OnInit, OnDestroy {\n\n  public confirmResult$: Subject<boolean>;\n  public timePeriods: string[] = [];\n  public courseTypes: string[] = [];\n  public periodDescriptions: string[] = [];\n  public courseTypeDescriptions: string[] = [];\n\n  constructor(\n    protected translateService: TranslateService,\n    protected storageService: StorageService,\n    protected formBuilder: FormBuilder,\n    private modalRef: BsModalRef,\n    private courseService: CourseService,\n  ) {\n    super(translateService, storageService, formBuilder);\n\n    this.model = new CourseNewDTO();\n    this.showModal = false;\n    this.confirmResult$ = new Subject();\n    this.timePeriods = this.courseService.listTimePeriods ();\n    this.courseTypes = this.courseService.listCourseTypes ();\n    this.periodDescriptions = this.courseService.getPeriodDescriptions ();\n    this.courseTypeDescriptions = this.courseService.getCourseTypeDescriptions ();\n  }\n\n  ngOnInit(): void {\n    this.form = this.buildForm();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription$.unsubscribe();\n  }\n\n  protected showValidationModal(form: any): void {}\n  protected submit(): void {\n    this.model = Object.assign(this.model, this.form.value) as CourseNewDTO;\n    this.subscription$ = this.courseService.insertCourse(this.model).subscribe(\n      (response) => {\n        if (response && response.hasOwnProperty('error')) {\n          this.confirmAndClose(false);\n          return;\n        }\n\n        this.confirmAndClose(true);\n      },\n      () => this.confirmAndClose(false)\n    );\n  }\n\n  private buildForm(): FormGroup {\n    this.form = this.formBuilder.group ({\n      id: [null],\n      name: [null, [Validators.required, Validators.minLength (5), Validators.maxLength (120)]],\n      period: [null, [Validators.required]],\n      type: [null, [Validators.required]]\n    });\n\n    return this.form;\n  }\n\n  private confirmAndClose(value?: boolean): void {\n    this.modalRef.hide ();\n\n    if (value != null) {\n      this.confirmResult$.next (value);\n    }\n  }\n\n  public onClose(): void {\n    this.confirmAndClose (null);\n  }\n\n  public getTranslatedPeriod(period: string): string {\n    return this.courseService.getTranslatedPeriod (period);\n  }\n\n  public getTranslatedCourseType(type: string): string {\n    return this.courseService.getTranslatedCourseType (type);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { BsModalService, BsModalRef, ModalOptions } from 'ngx-bootstrap/modal';\r\n\r\nimport { AlertTypes } from '../enums/alert-types.enum';\r\n\r\nimport { MeetingScheduleDTO } from '../models/domain/dto/meeting-schedule.dto';\r\nimport { CourseDTO } from '../models/domain/dto/course.dto';\r\n\r\nimport { AlertModalComponent } from '../shared/modals/alert-modal/alert-modal.component';\r\nimport { ConfirmModalComponent } from '../shared/modals/confirm-modal/confirm-modal.component';\r\nimport { ReportDetailsModalComponent } from '../shared/modals/report-details-modal/report-details-modal.component';\r\nimport { ValidationsModalComponent } from '../shared/modals/validations-modal/validations-modal.component';\r\n\r\nimport { MeetingSchedulesFormComponent } from '../views/meeting-schedules/meeting-schedules-form/meeting-schedules-form.component';\r\nimport { ReportsFormComponent } from '../views/reports/reports-form/reports-form.component';\r\nimport { SchoolClassesListComponent } from '../views/school-classes/school-classes-list/school-classes-list.component';\r\nimport { WaitModalComponent } from '../shared/modals/wait-modal/wait-modal.component';\r\nimport { CoursesFormComponent } from '../views/courses/courses-form/courses-form.component';\r\nimport { SchoolClassesFormComponent } from '../views/school-classes/school-classes-form/school-classes-form.component';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalService {\r\n\r\n  constructor(private modalService: BsModalService) { }\r\n\r\n  private showAlert(title: string, message: string, type: AlertTypes, dismissTimeout?: number): void {\r\n    const modalRef: BsModalRef = this.modalService.show (AlertModalComponent);\r\n    modalRef.content.type = type;\r\n    modalRef.content.title = title;\r\n    modalRef.content.message = message;\r\n\r\n    if (dismissTimeout) {\r\n      setTimeout (() => modalRef.hide (), dismissTimeout);\r\n    }\r\n  }\r\n\r\n  public showAlertDanger(title: string, message: string): void {\r\n    this.showAlert (title, message, AlertTypes.DANGER);\r\n  }\r\n\r\n  public showAlertSuccess(title: string, message: string): void {\r\n    this.showAlert (title, message, AlertTypes.SUCCESS, 3000);\r\n  }\r\n\r\n  public showConfirm(title: string, body: string, cancelButtonText?: string, okButtonText?: string):\r\n      Subject<boolean> {\r\n    const modalRef: BsModalRef = this.modalService.show (ConfirmModalComponent);\r\n    modalRef.content.title = title;\r\n    modalRef.content.body = body;\r\n\r\n    if (cancelButtonText) {\r\n      modalRef.content.cancelButtonText = cancelButtonText;\r\n    }\r\n\r\n    if (okButtonText) {\r\n      modalRef.content.okButtonText = okButtonText;\r\n    }\r\n\r\n    return (modalRef.content as ConfirmModalComponent).confirmResult;\r\n  }\r\n\r\n  public showReportDetails(employeeName: string, studentName: string, title: string, content: string, emission: Date): void {\r\n    const modalRef = this.modalService.show (ReportDetailsModalComponent, { ignoreBackdropClick: true });\r\n    modalRef.content.employeeName = employeeName;\r\n    modalRef.content.studentName = studentName;\r\n    modalRef.content.title = title;\r\n    modalRef.content.content = content;\r\n    modalRef.content.emission = emission;\r\n  }\r\n\r\n  public showValidations(fields: string[]): void {\r\n    const modalRef = this.modalService.show (ValidationsModalComponent);\r\n    modalRef.content.fields = fields;\r\n  }\r\n\r\n  public showNewMeetingSchedule(): Subject<boolean> {\r\n    const modalRef = this.modalService.show (MeetingSchedulesFormComponent);\r\n    return (modalRef.content as MeetingSchedulesFormComponent).confirmResult;\r\n  }\r\n\r\n  public showNewReport(schedule: MeetingScheduleDTO): Subject<boolean> {\r\n    const modalRef = this.modalService.show (ReportsFormComponent);\r\n    modalRef.content.schedule = schedule;\r\n    return (modalRef.content as ReportsFormComponent).confirmResult;\r\n  }\r\n\r\n  public showSchoolClass(course: CourseDTO): void {\r\n    const modalRef = this.modalService.show (SchoolClassesListComponent);\r\n    modalRef.content.course = course;\r\n    modalRef.setClass ('modal-lg');\r\n  }\r\n\r\n  public showWaitModal(): BsModalRef {\r\n    const config: ModalOptions = { ignoreBackdropClick: true, keyboard: false };\r\n    const modalRef = this.modalService.show (WaitModalComponent, config);\r\n    return modalRef;\r\n  }\r\n\r\n  public showNewCourse(): Subject<boolean> {\r\n    const modalRef = this.modalService.show (CoursesFormComponent);\r\n    return (modalRef.content as CoursesFormComponent).confirmResult$;\r\n  }\r\n\r\n  public showNewSchoolClass(course: CourseDTO): Subject<boolean> {\r\n    const modalRef = this.modalService.show (SchoolClassesFormComponent);\r\n    modalRef.content.course = course;\r\n    return (modalRef.content as SchoolClassesFormComponent).confirmResult;\r\n  }\r\n\r\n  public hideModal(modalRef: BsModalRef): void {\r\n    if (modalRef) {\r\n      modalRef.hide ();\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { SchoolClassNewDTO } from 'src/app/models/domain/new-dto/school-class.new.dto';\nimport { CourseDTO } from 'src/app/models/domain/dto/course.dto';\n\nimport { TranslateService } from '@ngx-translate/core';\nimport { StorageService } from 'src/app/services/storage.service';\nimport { SchoolClassService } from 'src/app/services/domain/school-class.service';\n\nimport { BaseFormComponent } from 'src/app/shared/base-form/base-form.component';\n\n@Component({\n  selector: 'app-school-classes-form',\n  templateUrl: './school-classes-form.component.html'\n})\nexport class SchoolClassesFormComponent extends BaseFormComponent<SchoolClassNewDTO> implements OnInit, OnDestroy {\n\n  public confirmResult: Subject<boolean>;\n  public todayDate = new Date ();\n  public bsDateConfig = { isAnimated: true };\n  public currentCourse = new CourseDTO ();\n  public errorMessage: string;\n\n  @Input('course') public set course(localCourse: CourseDTO) {\n    this.currentCourse = localCourse;\n    this.form.patchValue ({\n      name: this.buildSchoolClassName (),\n      courseId: this.currentCourse.getId ()\n    });\n  }\n\n  constructor(\n    protected translateService: TranslateService,\n    protected storageService: StorageService,\n    protected formBuilder: FormBuilder,\n    private modalRef: BsModalRef,\n    private schoolClassService: SchoolClassService\n  ) {\n    super(translateService, storageService, formBuilder);\n\n    this.model = new SchoolClassNewDTO ();\n    this.showModal = false;\n    this.confirmResult = new Subject();\n  }\n\n  ngOnInit(): void {\n    this.form = this.buildForm();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription$.unsubscribe ();\n  }\n\n  protected showValidationModal(form: any): void {}\n  protected submit(): void {\n    this.errorMessage = '';\n    this.model = Object.assign (this.model, this.form.value) as SchoolClassNewDTO;\n\n    const start = this.model.getStart ();\n    const end = this.model.getEnd ();\n\n    if (start > end) {\n      this.errorMessage = 'classes.messages.start-greater-than-end';\n      return;\n    }\n\n    this.subscription$ = this.schoolClassService.insertSchoolClass (this.model).subscribe (\n      (response) => {\n        if (response && response.hasOwnProperty ('error')) {\n          this.confirmAndClose (false);\n          return;\n        }\n\n        this.confirmAndClose (true);\n      },\n      () => this.confirmAndClose (false)\n    );\n  }\n\n  private buildForm(): FormGroup {\n    this.form = this.formBuilder.group({\n      id: [null],\n      name: [null, [Validators.required]],\n      start: [null, [Validators.required]],\n      end: [null, [Validators.required]],\n      courseId: [null, [Validators.required]]\n    });\n\n    return this.form;\n  }\n\n  private confirmAndClose(value?: boolean): void {\n    this.modalRef.hide ();\n\n    if (value != null) {\n      this.confirmResult.next (value);\n    }\n  }\n\n  public onClose(): void {\n    this.confirmAndClose (null);\n  }\n\n  private buildSchoolClassName(): string {\n    const courseName = this.currentCourse.getName ();\n    const words = courseName.split(' ');\n    let schoolClassName = '';\n\n    if (words.length >= 2) {\n      words.forEach (word => schoolClassName += word.charAt (0).toUpperCase ());\n    }\n    else {\n      schoolClassName += courseName.charAt (0).toUpperCase ();\n    }\n\n    schoolClassName = `${schoolClassName} - Class`;\n    return schoolClassName;\n  }\n}\n","\r\nexport class SchoolClassNewDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private start: Date;\r\n    private end: Date;\r\n    private courseId: number;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getStart(): Date {\r\n        return this.start;\r\n    }\r\n\r\n    public setStart(start: Date) {\r\n        this.start = start;\r\n    }\r\n\r\n    public getEnd(): Date {\r\n        return this.end;\r\n    }\r\n\r\n    public setEnd(end: Date) {\r\n        this.end = end;\r\n    }\r\n\r\n    public getCourseId(): number {\r\n        return this.courseId;\r\n    }\r\n\r\n    public setCourseId(courseId: number) {\r\n        this.courseId = courseId;\r\n    }\r\n}\r\n","\n<!-- new school classes -->\n<article class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\n\n    <!-- header -->\n    <div class=\"modal-header\">\n        <header>\n            <h2 class=\"modal-title\"> \n                {{ 'global.buttons.new-class' | translate }} \n            </h2>\n        </header>\n        \n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose();\">\n            <span aria-hidden=\"true\">&times;</span>\n        </button>\n    </div>\n\n    <!-- body -->\n    <div class=\"modal-body\">\n        <form class=\"needs-validation\" novalidate [formGroup]=\"form\" (ngSubmit)=\"onSubmit ();\">\n            \n            <!-- name -->\n            <div class=\"row my-2\">\n                <div class=\"col-12\">\n                    <input type=\"text\" class=\"form-control\" minlength=\"5\" maxlength=\"120\"\n                           [placeholder]=\"' * ' + ('global.personal.name' | translate)\"\n                           formControlName=\"name\" #nameInput\n                           [ngClass]=\"buildValidationClass ('name')\">\n\n                    <small class=\"text-muted\">\n                        {{ 'global.other.needed' | translate }} {{ 'global.other.from' | translate }} \n                        {{ nameInput.minLength }}\n                        {{ 'global.other.to' | translate }} {{ nameInput.maxLength }}\n                        {{ 'global.validations-messages.characters' | translate }}\n                    </small>\n\n                    <app-error-message [control]=\"form.get ('name')\" [label]=\"'global.personal.name' | translate\">\n                    </app-error-message>\n                </div>\n            </div>\n\n            <!-- course -->\n            <div class=\"row my-2\">\n                <div class=\"col-12\">\n                    <input type=\"text\" class=\"form-control\" [value]=\"this.currentCourse.getName ()\" readonly disabled>\n                </div>\n            </div>\n\n            <div class=\"row my-2\">\n\n                <!-- start -->\n                <div class=\"col-6\">\n                    <input type=\"text\" class=\"form-control\" minlength=\"10\" maxlength=\"10\" \n                           formControlName=\"start\" [ngClass]=\"buildValidationClass ('start')\"\n                           [placeholder]=\"' * ' + ('classes.start' | translate)\"\n                           bsDatepicker [bsConfig]=\"bsDateConfig\" [minDate]=\"todayDate\">\n\n                    <app-error-message [control]=\"form.get ('start')\" [label]=\"'classes.start' | translate\">\n                    </app-error-message>\n                </div>\n\n                <!-- end -->\n                <div class=\"col-6\">\n                    <input type=\"text\" class=\"form-control\" minlength=\"10\" maxlength=\"10\"\n                           formControlName=\"end\" [ngClass]=\"buildValidationClass ('end')\"\n                           [placeholder]=\"' * ' + ('classes.end' | translate)\"\n                           bsDatepicker [bsConfig]=\"bsDateConfig\" [minDate]=\"todayDate\">\n\n                    <app-error-message [control]=\"form.get ('end')\" [label]=\"'classes.end' | translate\">\n                    </app-error-message>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <span class=\"btn-outline-danger font-weight-bold\">\n                        {{ errorMessage | translate }}\n                    </span>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"required-label\"> \n                        (*) {{ 'global.required-fields' | translate }} \n                    </label>\n                    <button type=\"submit\" class=\"d-none\" #buttonSubmit> Submit </button>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <!-- footer -->\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\" (click)=\"onClose ();\">\n            {{ 'global.buttons.cancel' | translate }}\n        </button>\n        <button type=\"button\" class=\"btn btn-success float-right\" (click)=\"buttonSubmit.click ()\">\n            {{ 'global.buttons.submit' | translate }} \n        </button>\n    </div>\n\n</article>","import { PersonDTO } from './person.dto';\r\n\r\nexport class StudentDTO extends PersonDTO {\r\n\r\n    private birthdate: Date;\r\n    private schoolClass: string;\r\n    private course: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public getBirthdate(): Date {\r\n        return this.birthdate;\r\n    }\r\n\r\n    public setBirthdate(birthdate: Date) {\r\n        this.birthdate = birthdate;\r\n    }\r\n\r\n    public getSchoolClass(): string {\r\n        return this.schoolClass;\r\n    }\r\n\r\n    public setSchoolClass(schoolClass: string) {\r\n        this.schoolClass = schoolClass;\r\n    }\r\n\r\n    public getCourse(): string {\r\n        return this.course;\r\n    }\r\n\r\n    public setCourse(course: string) {\r\n        this.course = course;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from 'src/app/services/crud.service';\r\n\r\nimport { MeetingScheduleDTO } from 'src/app/models/domain/dto/meeting-schedule.dto';\r\nimport { MeetingScheduleNewDTO } from 'src/app/models/domain/new-dto/meeting-schedule.new.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MeetingScheduleService extends CrudService<MeetingScheduleDTO | MeetingScheduleNewDTO> {\r\n\r\n  private protectedUrl: string;\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n    this.protectedUrl = environment.API + '/v1/protected/schedules';\r\n  }\r\n\r\n  public findById(id: number): Observable<MeetingScheduleDTO | MeetingScheduleNewDTO> {\r\n    return this.findUnique (`${this.protectedUrl}/${id}`);\r\n  }\r\n\r\n  public findAll(): Observable<(MeetingScheduleDTO | MeetingScheduleNewDTO)[]> {\r\n    return this.listAll (this.protectedUrl);\r\n  }\r\n\r\n  public findAllByEmployee(employeeId: number):\r\n      Observable<(MeetingScheduleDTO | MeetingScheduleNewDTO)[]> {\r\n    return this.listAll (`${this.protectedUrl}/employee/${employeeId}`);\r\n  }\r\n\r\n  public findAllByStudent(studentId: number):\r\n      Observable<(MeetingScheduleDTO | MeetingScheduleNewDTO)[]> {\r\n    return this.listAll (`${this.protectedUrl}/student/${studentId}`);\r\n  }\r\n\r\n  public findAllByStatus(status: string):\r\n      Observable<(MeetingScheduleDTO | MeetingScheduleNewDTO)[]> {\r\n    let params = new HttpParams ();\r\n    params = params.set ('value', status);\r\n    return this.listAll (`${this.protectedUrl}/status`, params);\r\n  }\r\n\r\n  public insertMeetingSchedule(meetingSchedule: MeetingScheduleNewDTO): Observable<object> {\r\n    return this.insert (this.protectedUrl, meetingSchedule);\r\n  }\r\n\r\n  public updateStatus(meetingSchedule: MeetingScheduleDTO): Observable<object> {\r\n    return this.update (`${this.protectedUrl}/${meetingSchedule.getId ()}`, meetingSchedule);\r\n  }\r\n}\r\n","\r\nexport class SchoolClassDTO {\r\n\r\n    private id: number;\r\n    private name: string;\r\n    private start: Date;\r\n    private end: Date;\r\n\r\n    constructor() {}\r\n\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n\r\n    public setId(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public getStart(): Date {\r\n        return this.start;\r\n    }\r\n\r\n    public setStart(start: Date) {\r\n        this.start = start;\r\n    }\r\n\r\n    public getEnd(): Date {\r\n        return this.end;\r\n    }\r\n\r\n    public setEnd(end: Date) {\r\n        this.end = end;\r\n    }\r\n}\r\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ReportService } from 'src/app/services/domain/report.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\nimport { ReportDTO } from 'src/app/models/domain/dto/report.dto';\r\nimport { EmployeeDTO } from 'src/app/models/domain/dto/employee.dto';\r\nimport { StudentDTO } from 'src/app/models/domain/dto/student.dto';\r\nimport { MeetingScheduleDTO } from 'src/app/models/domain/dto/meeting-schedule.dto';\r\n\r\nimport { BaseFormComponent } from 'src/app/shared/base-form/base-form.component';\r\n\r\n@Component({\r\n  selector: 'app-reports-form',\r\n  templateUrl: './reports-form.component.html',\r\n})\r\nexport class ReportsFormComponent extends BaseFormComponent<ReportDTO> implements OnInit, OnDestroy {\r\n\r\n  public employee: EmployeeDTO = new EmployeeDTO();\r\n  public student: StudentDTO = new StudentDTO();\r\n  public confirmResult: Subject<boolean>;\r\n\r\n  @Input() public set schedule(localSchedule: MeetingScheduleDTO) {\r\n    this.employee = localSchedule.getEmployee ();\r\n    this.student = localSchedule.getStudent ();\r\n    this.form.patchValue ({\r\n      schedule: {\r\n        id: localSchedule.getId (),\r\n        employeeId: this.employee.getId (),\r\n        studentId: this.student.getId ()\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    protected formBuilder: FormBuilder,\r\n    private reportService: ReportService,\r\n    private modalRef: BsModalRef\r\n  ) {\r\n    super(translateService, storageService, formBuilder);\r\n\r\n    this.model = new ReportDTO();\r\n    this.showModal = false;\r\n    this.confirmResult = new Subject();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.buildForm ();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription$.unsubscribe ();\r\n  }\r\n\r\n  protected showValidationModal(form: any): void {}\r\n  protected submit(): void {\r\n    this.model = Object.assign (this.model, this.form.value) as ReportDTO;\r\n    this.subscription$ = this.reportService.insertReport (this.model).subscribe (\r\n      () => this.confirmAndClose (true),\r\n      () => this.confirmAndClose (false)\r\n    );\r\n  }\r\n\r\n  private buildForm(): FormGroup {\r\n    return this.formBuilder.group ({\r\n      id: [null],\r\n      title: [null, [Validators.required, Validators.minLength (5), Validators.maxLength (30)]],\r\n      content: [null, [Validators.required, Validators.minLength (10), Validators.maxLength (1000)]],\r\n      schedule: this.formBuilder.group ({\r\n        id: [null, [Validators.required]],\r\n        employeeId: [null, [Validators.required]],\r\n        studentId: [null, [Validators.required]],\r\n      })\r\n    });\r\n  }\r\n\r\n  private confirmAndClose(value: boolean): void {\r\n    this.modalRef.hide();\r\n\r\n    if (value !== null) {\r\n      this.confirmResult.next (value);\r\n    }\r\n  }\r\n\r\n  public onClose(): void {\r\n    this.confirmAndClose (null);\r\n  }\r\n}\r\n","\r\n<!-- new report -->\r\n<section class=\"modal-content\" role=\"dialog\" aria-hidden=\"true\">\r\n\r\n    <!-- header -->\r\n    <div class=\"modal-header\">\r\n        <header>\r\n            <h2 class=\"modal-title\"> \r\n                {{ 'global.buttons.new-report' | translate }} \r\n            </h2>\r\n        </header>\r\n        \r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose ();\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n\r\n    <!-- body -->\r\n    <div class=\"modal-body\">\r\n        <form class=\"needs-validation\" novalidate [formGroup]=\"form\" (ngSubmit)=\"onSubmit ()\">\r\n            <div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <p class=\"text-center\">\r\n                            {{ employee.getName ()}}\r\n                            {{ ('report.about' | translate).toLowerCase() }}\r\n                            {{ student.getName ()}}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- title -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <input type=\"text\" class=\"form-control\" minlength=\"5\" maxlength=\"30\" \r\n                               formControlName=\"title\" #titleInput\r\n                               [placeholder]=\"'*' + ('report.title' | translate)\"\r\n                               [ngClass]=\"buildValidationClass ('title')\">\r\n\r\n                        <small class=\"text-muted\">\r\n                            {{ 'global.other.needed' | translate }} {{ 'global.other.from' | translate }} \r\n                            {{ titleInput.minLength }}\r\n                            {{ 'global.other.to' | translate }} {{ titleInput.maxLength }}\r\n                            {{ 'global.validations-messages.characters' | translate }}\r\n                        </small>\r\n\r\n                        <app-error-message [control]=\"form.get ('title')\" [label]=\"'report.title' | translate\">\r\n                        </app-error-message>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- content -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <textarea id=\"contentTextArea\" class=\"form-control\" cols=\"30\" rows=\"3\" \r\n                                  minlength=\"10\" maxlength=\"1000\" \r\n                                  [placeholder]=\"'*' + ('report.content' | translate)\"\r\n                                  formControlName=\"content\" #contentTextArea\r\n                                  [ngClass]=\"buildValidationClass ('content')\"></textarea>\r\n                        \r\n                        <small class=\"text-muted\">\r\n                            {{ 'global.other.needed' | translate }} {{ 'global.other.from' | translate }} \r\n                            {{ contentTextArea.minLength }}\r\n                            {{ 'global.other.to' | translate }} {{ contentTextArea.maxLength }}\r\n                            {{ 'global.validations-messages.characters' | translate }}\r\n                        </small>\r\n\r\n                        <app-error-message [control]=\"form.get ('content')\" [label]=\"'report.content' | translate\">\r\n                        </app-error-message>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <label class=\"required-label\"> (*) {{ 'global.required-fields' | translate }} </label>\r\n                        <button type=\"submit\" class=\"d-none\" #buttonSubmit> Submit </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n    <!-- footer -->\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-danger float-left\" data-dismiss=\"modal\" (click)=\"onClose ();\"> \r\n            {{ 'global.buttons.close' | translate }} \r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-success float-right\" (click)=\"buttonSubmit.click ()\">\r\n            {{ 'global.buttons.submit' | translate }} \r\n        </button>\r\n    </div>\r\n</section>","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FormValidators } from '../utils/form-validators';\r\nimport { TranslatePipe } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-error-message',\r\n  templateUrl: './error-message.component.html'\r\n})\r\nexport class ErrorMessageComponent {\r\n\r\n  @Input() public control: FormControl;\r\n  @Input() public label: string;\r\n\r\n  constructor(private translate: TranslatePipe) { }\r\n\r\n  public get errorMessages(): any {\r\n    const errors = this.control.errors;\r\n    for (const propertyName in errors) {\r\n      if (errors.hasOwnProperty(propertyName) && this.control.dirty) {\r\n        const propertyValue = errors[propertyName];\r\n        return FormValidators.getErrorMessage(this.label, propertyName, propertyValue);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","<div class=\"invalid-feedback d-block\" *ngIf=\"errorMessages != null\">\r\n    {{ errorMessages | translate }}\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from 'src/app/services/crud.service';\r\n\r\nimport { SchoolClassDTO } from 'src/app/models/domain/dto/school-class.dto';\r\nimport { SchoolClassNewDTO } from 'src/app/models/domain/new-dto/school-class.new.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SchoolClassService extends CrudService<SchoolClassDTO | SchoolClassNewDTO> {\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n  }\r\n\r\n  public findAllByCourseAndName(courseId: number, name: string):\r\n      Observable<(SchoolClassDTO | SchoolClassNewDTO)[]> {\r\n    let params = new HttpParams ();\r\n    params = params.set ('name', name);\r\n    return this.listAll (`${environment.API}/v1/public/courses/${courseId}/classes`, params);\r\n  }\r\n\r\n  public insertSchoolClass(schoolClass: SchoolClassNewDTO): Observable<object> {\r\n    return this.insert (`${environment.API}/v1/admin/classes`, schoolClass);\r\n  }\r\n}\r\n","import { FormControl, FormGroup } from '@angular/forms';\r\n\r\nexport class FormValidators {\r\n\r\n    // HELPER FUNCTIONS\r\n\r\n    public static equalsTo(otherField: string): object {\r\n\r\n        const validator = (formControl: FormControl) => {\r\n\r\n            if (otherField == null ) {\r\n                throw new Error ('Other field is required!');\r\n            }\r\n\r\n            const root = (formControl.root as FormGroup);\r\n            if (!formControl.root || !root.controls) {\r\n                return null;\r\n            }\r\n\r\n            const field = root.get (otherField);\r\n            if (!field) {\r\n                throw new Error ('A valid field is required!');\r\n            }\r\n\r\n            if (field.value !== formControl.value) {\r\n                return { equalsTo: otherField };\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        return validator;\r\n    }\r\n\r\n    public static zipCode(control: FormControl): object {\r\n\r\n        const zipCode = control.value;\r\n        if (zipCode && zipCode !== '') {\r\n            const validator = /^[0-9]{5}(?:-[0-9]{4})?$/;\r\n            return validator.test (zipCode) ? null : { invalidZipCode: true };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getErrorMessage(fieldName: string, validatorName: string, validatorValue?: any): any {\r\n        const config = {\r\n            required: `This field is required!`,\r\n            minlength: `Minimum length is ${validatorValue.requiredLength} characters.`,\r\n            maxlength: `Maximum length is ${validatorValue.requiredLength} characters.`,\r\n            email: 'Email is invalid!',\r\n            equalsTo: `${fieldName} are not equals!`,\r\n        };\r\n\r\n        return config[validatorName];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { CrudService } from 'src/app/services/crud.service';\r\n\r\nimport { PersonDTO } from 'src/app/models/domain/dto/person.dto';\r\nimport { EmployeeDTO } from 'src/app/models/domain/dto/employee.dto';\r\nimport { StudentDTO } from 'src/app/models/domain/dto/student.dto';\r\nimport { PersonNewDTO } from 'src/app/models/domain/new-dto/person.new.dto';\r\nimport { EmployeeNewDTO } from 'src/app/models/domain/new-dto/employee.new.dto';\r\nimport { StudentNewDTO } from 'src/app/models/domain/new-dto/student.new.dto';\r\nimport { Observable } from 'rxjs';\r\nimport { ValueConverter } from '@angular/compiler/src/render3/view/template';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonService extends CrudService<PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO> {\r\n\r\n  protected adminUrl: string;\r\n  protected protectedUrl: string;\r\n\r\n  constructor(protected httpClient: HttpClient) {\r\n    super(httpClient);\r\n    this.adminUrl = `${environment.API}/v1/admin/persons`;\r\n    this.protectedUrl = `${environment.API}/v1/protected/persons`;\r\n  }\r\n\r\n  public findAllPersons():\r\n      Observable<(PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO)[]> {\r\n    return this.listAll (this.adminUrl);\r\n  }\r\n\r\n  public findPersonById(id: number):\r\n      Observable<PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO> {\r\n    return this.findUnique (`${this.protectedUrl}/${id}`);\r\n  }\r\n\r\n  private findUniqueByField(url: string, key: string, value: string):\r\n      Observable<PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO> {\r\n    let params = new HttpParams ();\r\n    params = params.set (key, value);\r\n    return this.findUnique (url, params);\r\n  }\r\n\r\n  public findPersonByKeyAndValueWhereUrlIs(url: string, key: string, value: string):\r\n      Observable<PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO> {\r\n    return this.findUniqueByField(url, key, value);\r\n  }\r\n\r\n  public findPersonByEmail(url: string, email: string):\r\n      Observable<PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO> {\r\n    return this.findUniqueByField (url, 'value', email);\r\n  }\r\n\r\n  public findPersonBySSN(url: string, ssn: string):\r\n      Observable<PersonDTO | EmployeeDTO | StudentDTO | PersonNewDTO | EmployeeNewDTO | StudentNewDTO> {\r\n    return this.findUniqueByField (url, 'value', ssn);\r\n  }\r\n\r\n  protected insertPerson(url: string, person: PersonNewDTO): Observable<object> {\r\n    return this.insert (url, person);\r\n  }\r\n\r\n  protected updatePerson(url: string, person: PersonDTO): Observable<object> {\r\n    return this.update (url, person);\r\n  }\r\n\r\n  public deletePerson(id: number): Observable<object> {\r\n    return this.delete (`${this.adminUrl}/${id}`);\r\n  }\r\n\r\n  public updateUserImage(fileImage: File): Observable<HttpResponse<any>> {\r\n    const formData = new FormData ();\r\n    formData.append ('file', fileImage);\r\n    const url = `${this.protectedUrl}/upload-picture`;\r\n    return this.httpClient.post (url, formData, { observe: 'response' });\r\n  }\r\n\r\n}\r\n"]}