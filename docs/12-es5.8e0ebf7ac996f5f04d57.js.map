{"version":3,"sources":["webpack:///src/app/enums/meeting-status.enum.ts","webpack:///src/app/views/meeting-schedules/meeting-schedules-list/meeting-schedules-list.component.html","webpack:///src/app/views/meeting-schedules/meeting-schedules-routing.module.ts","webpack:///src/app/views/meeting-schedules/meeting-schedules-list/meeting-schedules-list.component.ts","webpack:///src/app/views/meeting-schedules/meeting-schedules.module.ts"],"names":["MeetingStatus","SCHEDULED","FINISHED","CANCELED","MeetingSchedulesListComponent","MeetingSchedulesRoutingModule","MeetingSchedulesModule","ROUTES","path","component","translateService","modalService","storageService","authenticationService","meetingScheduleService","super","isHidden","statusDescriptions","this","globalHeader","modalTexts","confirm","body","success","error","tableHeaders","Object","assign","_localUser","getLocalUser","onReload","hasError","records$","loadData","toggleVisibility","showConfirm","title","asObservable","pipe","take","switchMap","result","selectedModel","setMeetingStatus","updateStatus","subscribe","currentStatus","showAlertSuccess","showAlertDanger","status","pipeFindAll","findAllByStatus","findAll","getType","findAllByEmployee","getId","findAllByStudent","observable","map","schedules","schedule","dto","employee","student","getEmployee","getStudent","setEmployee","setStudent","catchError","error$","next","handleError","loading","localCancelScheduleButton","nativeElement","getMeetingStatus","localNewReportButton","listStatus","hasOwnProperty","push","type","showNewMeetingSchedule","showNewReport","profile","containsProfile","key","toLowerCase","index","indexOf","button","filterStatus","forChild"],"mappings":"+2CACYA,EAAZ,SAAYA,G,OAER,EAAAC,UAAA,YACA,EAAAC,SAAA,WACA,EAAAC,SAAA,WAJQH,EAAZ,CAKC,I,0KCMO,iBACI,sBAA4C,gHACxC,oBACI,Q,wCACJ,OACA,oBACI,Q,yCACJ,OACJ,OACJ,O,MANY,+FAGA,iG,yBAcA,oBACI,Q,oBACJ,Q,0CAF8E,gBAC1E,yD,qCAOhB,gBACI,oBAAwD,8EACpD,Q,oBACJ,OACJ,O,qBAJmF,0BAE3E,uE,yBAWY,gBACI,Q,oBACJ,Q,uBADI,mC,qCAOA,cACI,mBAAmD,yFAAnD,OACJ,Q,yBAJR,aACI,gBACI,uBAGJ,OAEA,gBAAiB,QAA8B,OAC/C,gBAAiB,QAA0C,OAC3D,gBAAiB,QAAyC,OAE1D,gBACI,gBACI,S,qBACJ,OACJ,OACJ,Q,+CAdc,6DAKO,sCACA,iEACA,gEAGP,oDACF,8E,yBAvBxB,iBACI,mBACI,gBACI,aACI,sBAGJ,OACJ,OACA,gBACI,uBAiBJ,OACJ,OACJ,Q,gCAzBmD,uCAMd,2B,qCAsBrC,cACI,iBACI,iBACI,uBAAuF,4DACnF,Q,oBACJ,OACJ,OACA,iBACI,uBAAmF,sEAC/E,S,qBACJ,OACJ,OACJ,OACJ,O,sBAZqB,kCAGL,4EAKA,8D,yBA3CxB,iBACI,iBACI,uBAgCA,wBAcJ,OACJ,Q,sCA/CuC,+CAA2C,cAgCpE,kE,sBAmBN,eACI,Q,wCAEJ,Q,MAFI,2G,yBAFR,iBACI,wBAIJ,Q,6BAJW,iCAAiB,e,qCAQ5B,eAAO,Q,oBAAiD,OACxD,oBAAgD,2DAC5C,Q,oBACJ,O,MAHO,+DAEH,yD,sBAKJ,iBACI,eAAO,Q,oBAAkD,OAC7D,Q,MADW,iEC9GnB,ICgBaI,EDPAC,EEOAC,EFhBPC,EAAiB,CACrB,CAAEC,KAAM,GAAIC,WCeDL,EAAN,a,kOAAA,U,MAAA,OAsBL,WACYM,EACAC,EACAC,EACFC,EACAC,2BAERC,cAAML,EAAkBE,EAAgBD,IAN9BD,mBACA,EAAAC,eACA,EAAAC,iBACF,EAAAC,wBACA,EAAAC,yBAzBH,EAAAE,YAaA,EAAAC,mBAA+B,CACpC,mBACA,qCACA,oCACA,qCAaAC,EAAKC,aAAe,8BACpBD,EAAKE,WAAWC,QAAQC,KAAO,iDAC/BJ,EAAKE,WAAWG,QAAQD,KAAO,4CAC/BJ,EAAKE,WAAWI,MAAMF,KAAO,0CAC7BJ,EAAKO,aAAe,CAClB,IAAK,6BAA8B,6BACnC,4BAA6B,mCAG/BC,OAAOC,OAAOT,EAAKU,WAAYhB,EAAeiB,gBAdtCf,EA3BL,O,EAAA,G,EAAA,kCA6CHI,KAAKY,aA7CF,qEAkDHZ,KAAKa,YACLb,KAAKc,SAAWd,KAAKe,WACrBf,KAAKgB,iBAAkB,KAAM,MApD1B,iCAuDY,WAEChB,KAAKP,aAAawB,YAAajB,KAAKE,WAAWC,QAAQe,MAAOlB,KAAKE,WAAWC,QAAQC,MAC9Fe,eAAeC,KACrB,OAAAC,EAAA,GAAK,GACL,OAAAC,EAAA,GAAUC,YAAM,OACVA,GACFvB,EAAKwB,cAAcC,iBAAiB,YAC7BzB,EAAKJ,uBAAuB8B,aAAa1B,EAAKwB,gBAGhD,OAETG,UACA,WACE3B,EAAKc,SAAWd,EAAKe,SAASf,EAAK4B,eACnC5B,EAAKP,aAAaoC,iBAAiB7B,EAAKE,WAAWG,QAAQa,MAAOlB,EAAKE,WAAWG,QAAQD,OAE5F,kBAAMJ,EAAKP,aAAaqC,gBAAgB9B,EAAKE,WAAWI,MAAMY,MAAOlB,EAAKE,WAAWI,MAAMF,UAzE1F,+BA6Ec2B,GAGjB,OAFA/B,KAAK4B,cAAgBG,EAEjBA,EAEO/B,KAAKgC,YADC,QAAXD,EACuB/B,KAAKJ,uBAAuBqC,gBAAiBF,GAG7C/B,KAAKJ,uBAAuBsC,WAItB,aAA/BlC,KAAKU,WAAWyB,UACXnC,KAAKgC,YAAahC,KAAKJ,uBAAuBwC,kBAAkBpC,KAAKU,WAAW2B,UAElD,YAA9BrC,KAAKU,WAAWyB,UAChBnC,KAAKgC,YAAahC,KAAKJ,uBAAuB0C,iBAAiBtC,KAAKU,WAAW2B,mBA7FrF,kCAiGiBE,cACpB,OAAOA,EAAWnB,KAChB,OAAAoB,EAAA,GAAIC,YAAS,OACJA,EAAUD,IAAKE,YACpB1C,EAAKa,YAEL,IAAI8B,EAAM,IAAI,IACVC,EAAW,IAAI,IACfC,EAAU,IAAI,IASlB,OAPAF,EAAMnC,OAAOC,OAAOkC,EAAKD,GACzBE,EAAWpC,OAAOC,OAAOmC,EAAUD,EAAIG,eACvCD,EAAUrC,OAAOC,OAAOoC,EAASF,EAAII,cAErCJ,EAAIK,YAAYJ,GAChBD,EAAIM,WAAWJ,GAERF,MAIX,OAAAO,EAAA,GAAY,kBACVlD,EAAKa,YACLb,EAAKmD,OAAOC,SACZpD,EAAKqD,YAAarD,EAAKE,WAAWI,MAAMY,MAAOlB,EAAKE,WAAWoD,QAAQlD,MAChE,SA1HR,oCA+HgB2B,GACnB,OAAQA,GACN,IAAK,WAAY,MAAO,sBACxB,IAAK,WAAY,MAAO,qBACxB,IAAK,YAAa,QAAS,MAAO,yBAnIjC,oCAuIgBW,GACnB1C,KAAKwB,cAAgBkB,EAGrB1C,KAAKuD,0BAA0BC,cAAiB,SAAsC,cAAjCd,EAASe,mBAC9DzD,KAAK0D,qBAAqBF,cAAiB,SAAsC,cAAjCd,EAASe,qBA5ItD,0CAgJH,IAAME,EAAuB,CAAC,OAC9B,IAAK,IAAM5B,KAAUjD,EACfA,EAAc8E,eAAgB7B,IAChC4B,EAAWE,KAAM/E,EAAciD,IAInC,OAAO4B,IAvJJ,uCA0JmBG,EAAc/B,GACpC/B,KAAKF,SAAqB,QAATgE,EAEJ,QAATA,GAA6B,KAAX/B,EACpB/B,KAAKc,SAAWd,KAAKe,SAAUgB,GAEf,OAAT+B,IACP9D,KAAKc,SAAWd,KAAKe,cAjKpB,mCAqKegB,GAChB/B,KAAKc,SAAWd,KAAKe,SAAUgB,KAtK9B,oDAyK+B,WAClB/B,KAAKP,aAAasE,yBAC1B5C,eAAgBC,KAAM,OAAAC,EAAA,GAAM,IAAIM,UACrCtB,YACKA,GACFL,EAAKP,aAAaoC,iBAAiB7B,EAAKE,WAAWG,QAAQa,MAAO,gDAClElB,EAAKc,SAAWd,EAAKe,YAGrBf,EAAKP,aAAaqC,gBAAgB9B,EAAKE,WAAWI,MAAMY,MAAO,+CAGnE,kBACElB,EAAKP,aAAaqC,gBAAgB9B,EAAKE,WAAWG,QAAQa,MAAO,kDAtLlE,2CA0LsB,WACTlB,KAAKP,aAAauE,cAAehE,KAAKwB,eAC9CL,eAAgBC,KAAM,OAAAC,EAAA,GAAM,IAAIM,UACrCtB,YACKA,GACFL,EAAKP,aAAaoC,iBAAkB7B,EAAKE,WAAWG,QAAQa,MAAO,kCACnElB,EAAKc,SAAWd,EAAKe,YAErBf,EAAKP,aAAaqC,gBAAiB9B,EAAKE,WAAWI,MAAMY,MAAO,iCAGpE,kBACElB,EAAKP,aAAaqC,gBAAiB9B,EAAKE,WAAWI,MAAMY,MAAO,oCAtMjE,sCA0MkB+C,GACrB,OAAOjE,KAAKL,sBAAsBuE,gBAAiBD,KA3MhD,0CA8MsBlC,GACzB,IAAMoC,EAAM,4BAA4BpC,EAAOqC,cACzCC,EAAQrE,KAAKD,mBAAmBuE,QAASH,GAC/C,OAAOnE,KAAKD,mBAAmBsE,KAjN5B,yCAOiEE,GACpEvE,KAAKuD,0BAA4BgB,IAR9B,oCAWuDA,GAC1DvE,KAAK0D,qBAAuBa,O,2BAZzB,GAA4C,K,sCAAtCrF,GAA6B,oD,uBAA7BA,EAA6B,mE,MAAA,M,6kDFpB1C,oBACI,iBACI,eAA8B,Q,oBAA+B,OACjE,OAEA,aAEA,gBAGI,wBAYA,gBACI,gBACI,iBACI,kBACI,S,qBACJ,OACJ,OACA,sBAA0C,uDAAU,EAAAsF,aAAA,WAChD,2BAGJ,OACJ,OACJ,OAGA,wBAKJ,OAEA,wB,iBAmDA,0CASA,0CAOA,0CAKJ,O,uBAnHsC,+CAQe,gDAYD,mCAI5B,qEAIuB,8CAQO,mDAOhC,4CAAuB,gB,mECvC3C,CAAElF,KAAM,MAAOC,U,UAAW,IAOrB,IAAMJ,EAAN,yB,qBAAMA,I,oDAAAA,IAA6B,SAH/B,CAAC,IAAasF,SAASpF,IACtB,O,2BESL,IAAMD,EAAN,yB,qBAAMA,I,oDAAAA,IAAsB,SARxB,CACP,IACA,EACA,IACA,IACA,Q","file":"x","sourcesContent":["\r\nexport enum MeetingStatus {\r\n\r\n    SCHEDULED = 'Scheduled',\r\n    FINISHED = 'Finished',\r\n    CANCELED = 'Canceled'\r\n}\r\n","\r\n<!-- meeting schedules -->\r\n<article class=\"table-box w-100 shadow-lg mx-auto my-md-5 my-3\">\r\n    <header>\r\n        <h1 class=\"mb-3 text-center\"> {{ globalHeader | translate }} </h1>\r\n    </header>\r\n\r\n    <hr>\r\n\r\n    <div class=\"form-row mb-3\">\r\n\r\n        <!-- admin combo -->\r\n        <div class=\"col-md-3 col-sm-6 my-md-0 my-2\" *ngIf=\"containsProfile ('ADMIN');\">\r\n            <select class=\"form-control\" #scheduleCombo (change)=\"toggleVisibility (scheduleCombo.value, statusCombo.value);\">\r\n                <option value=\"all\"> \r\n                    {{ 'global.other.all' | translate }} {{ 'global.menu-links.schedules' | translate }} \r\n                </option>\r\n                <option value=\"my\" selected> \r\n                    {{ 'global.other.my' | translate }} {{ 'global.menu-links.schedules' | translate }} \r\n                </option>\r\n            </select>\r\n        </div>\r\n\r\n        <!-- status combo -->\r\n        <div class=\"col-md-4 col-sm-6 my-md-0 my-2\" [hidden]=\"!isHidden\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text\"> \r\n                        {{ 'meeting-schedules.current-status' | translate }} \r\n                    </span>\r\n                </div>\r\n                <select #statusCombo class=\"form-control\" (change)=\"filterStatus (statusCombo.value);\">\r\n                    <option *ngFor=\"let status of listMeetingStatus(); let currentIndex = index;\" [value]=\"status\"> \r\n                        {{ statusDescriptions[currentIndex] | translate }} \r\n                    </option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- new meeting schedule -->\r\n        <div class=\"col-md-4 col-sm-6 my-md-0 my-2 \" *ngIf=\"containsProfile ('EMPLOYEE');\" [hidden]=\"isHidden\">\r\n            <button type=\"button\" class=\"btn btn-primary btn-block\" (click)=\"showNewMeetingScheduleModal ();\"> \r\n                {{ 'global.buttons.new-meeting-schedule' | translate }} \r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"records$ | async as schedules; else spanLoading;\">\r\n        <div class=\"col-12\">\r\n            <div class=\"table-responsive\" *ngIf=\"!hasError && schedules.length !== 0; else nothingFound\">\r\n                <table class=\"table table-striped table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\" *ngFor=\"let header of tableHeaders\"> \r\n                                {{ header | translate }}\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let schedule of schedules;\">\r\n                            <td scope=\"row\">\r\n                                <div *ngIf=\"containsProfile ('ADMIN') && !isHidden;\">\r\n                                    <input type=\"radio\" name=\"id\" class=\"custom-radio\" (click)=\"toggleButtons (schedule)\">\r\n                                </div>\r\n                            </td>\r\n    \r\n                            <td scope=\"row\"> {{ schedule.getDatetime () }} </td>\r\n                            <td scope=\"row\"> {{ schedule.getEmployee ()?.getName () }} </td>\r\n                            <td scope=\"row\"> {{ schedule.getStudent ()?.getName () }} </td>\r\n                            \r\n                            <td scope=\"row\">\r\n                                <span [class]=\"setBagdeClass (schedule.getMeetingStatus ())\">\r\n                                    {{ getTranslatedStatus (schedule.getMeetingStatus ()) | translate }} \r\n                                </span>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    \r\n            <!-- actions -->\r\n            <div *ngIf=\"containsProfile ('EMPLOYEE') && schedules.length !== 0\">\r\n                <div class=\"row\" [hidden]=\"isHidden\">\r\n                    <div class=\"col-lg-3 col-md-4 col-sm-6\">\r\n                        <button type=\"button\" class=\"btn btn-danger w-100 mt-2\" disabled #cancelScheduleButton (click)=\"onUpdate ();\"> \r\n                            {{ 'meeting-schedules.buttons.cancel-schedule' | translate }} \r\n                        </button>\r\n                    </div>\r\n                    <div class=\"col-md-3 col-sm-6\">\r\n                        <button type=\"button\" class=\"btn btn-primary w-100 mt-2\" disabled #newReportButton (click)=\"showNewReportModal ();\"> \r\n                            {{ 'global.buttons.new-report' | translate }} \r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #spanLoading>\r\n        <div class=\"bg-light p-3 text-center\">\r\n            <span *ngIf=\"!hasError; else spanError;\"> \r\n                {{ 'global.messages.loading' | translate }} \r\n                {{ 'global.menu-links.schedules' | translate }} ... \r\n            </span>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template #spanError>\r\n        <span> {{ 'global.messages.system-error' | translate }} </span>\r\n        <button type=\"button\" class=\"btn btn-info mx-1\" (click)=\"onReload ()\"> \r\n            {{ 'global.buttons.reload' | translate }} \r\n        </button>\r\n    </ng-template>\r\n\r\n    <ng-template #nothingFound>\r\n        <div class=\"bg-light p-3 text-center\">\r\n            <span> {{ 'global.messages.nothing-found' | translate }} </span>\r\n        </div>\r\n    </ng-template>\r\n</article>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { MeetingSchedulesListComponent } from './meeting-schedules-list/meeting-schedules-list.component';\r\nimport { MeetingSchedulesFormComponent } from './meeting-schedules-form/meeting-schedules-form.component';\r\n\r\nconst ROUTES: Routes = [\r\n  { path: '', component: MeetingSchedulesListComponent },\r\n  { path: 'new', component: MeetingSchedulesFormComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(ROUTES)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MeetingSchedulesRoutingModule { }\r\n","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { map, take, switchMap, catchError } from 'rxjs/operators';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { MeetingScheduleService } from 'src/app/services/domain/meeting-schedule.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\nimport { AuthenticationService } from 'src/app/services/authentication.service';\r\nimport { ModalService } from 'src/app/services/modal.service';\r\n\r\nimport { MeetingScheduleDTO } from 'src/app/models/domain/dto/meeting-schedule.dto';\r\nimport { EmployeeDTO } from 'src/app/models/domain/dto/employee.dto';\r\nimport { StudentDTO } from 'src/app/models/domain/dto/student.dto';\r\n\r\nimport { MeetingStatus } from 'src/app/enums/meeting-status.enum';\r\n\r\nimport { BaseTableComponent } from 'src/app/shared/list-table/base-table/base-table.component';\r\n\r\n@Component({\r\n  selector: 'app-meeting-schedules-list',\r\n  templateUrl: './meeting-schedules-list.component.html',\r\n})\r\nexport class MeetingSchedulesListComponent extends BaseTableComponent<MeetingScheduleDTO> implements OnInit {\r\n\r\n  public isHidden = true;\r\n  private currentStatus: string;\r\n  private localCancelScheduleButton: ElementRef;\r\n  private localNewReportButton: ElementRef;\r\n\r\n  @ViewChild('cancelScheduleButton') protected set cancelScheduleButton(button: ElementRef) {\r\n    this.localCancelScheduleButton = button;\r\n  }\r\n\r\n  @ViewChild('newReportButton') protected set newReportButton(button: ElementRef) {\r\n    this.localNewReportButton = button;\r\n  }\r\n\r\n  public statusDescriptions: string[] = [\r\n    'global.other.all',\r\n    'meeting-schedules.status.scheduled',\r\n    'meeting-schedules.status.finished',\r\n    'meeting-schedules.status.canceled'\r\n  ];\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected modalService: ModalService,\r\n    protected storageService: StorageService,\r\n    private authenticationService: AuthenticationService,\r\n    private meetingScheduleService: MeetingScheduleService,\r\n  ) {\r\n    super(translateService, storageService, modalService);\r\n\r\n    // default values\r\n    this.globalHeader = 'global.menu-links.schedules';\r\n    this.modalTexts.confirm.body = 'meeting-schedules.messages.cancel-confirmation';\r\n    this.modalTexts.success.body = 'meeting-schedules.messages.cancel-success';\r\n    this.modalTexts.error.body = 'meeting-schedules.messages.cancel-error';\r\n    this.tableHeaders = [\r\n      '#', 'meeting-schedules.datetime', 'meeting-schedules.employee',\r\n      'meeting-schedules.student', 'meeting-schedules.status.status'\r\n    ];\r\n\r\n    Object.assign(this._localUser, storageService.getLocalUser());\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.onReload ();\r\n  }\r\n\r\n  public onDelete(): void {}\r\n  public onReload(): void {\r\n    this.hasError = false;\r\n    this.records$ = this.loadData();\r\n    this.toggleVisibility ('my', '');\r\n  }\r\n\r\n  public onUpdate(): void {\r\n\r\n    const result$ = this.modalService.showConfirm (this.modalTexts.confirm.title, this.modalTexts.confirm.body);\r\n    result$.asObservable().pipe(\r\n      take(1),\r\n      switchMap(result => {\r\n        if (result) {\r\n          this.selectedModel.setMeetingStatus('Canceled');\r\n          return this.meetingScheduleService.updateStatus(this.selectedModel);\r\n        }\r\n\r\n        return EMPTY;\r\n      })\r\n    ).subscribe(\r\n      () => {\r\n        this.records$ = this.loadData(this.currentStatus);\r\n        this.modalService.showAlertSuccess(this.modalTexts.success.title, this.modalTexts.success.body);\r\n      },\r\n      () => this.modalService.showAlertDanger(this.modalTexts.error.title, this.modalTexts.error.body)\r\n    );\r\n   }\r\n\r\n  protected loadData(status?: string): Observable<MeetingScheduleDTO[]> {\r\n    this.currentStatus = status;\r\n\r\n    if (status) {\r\n      if (status !== 'All') {\r\n        return this.pipeFindAll (this.meetingScheduleService.findAllByStatus (status));\r\n      }\r\n      else {\r\n        return this.pipeFindAll (this.meetingScheduleService.findAll ());\r\n      }\r\n    }\r\n\r\n    if (this._localUser.getType () === 'Employee') {\r\n      return this.pipeFindAll (this.meetingScheduleService.findAllByEmployee(this._localUser.getId()));\r\n    }\r\n    else if (this._localUser.getType() === 'Student') {\r\n      return this.pipeFindAll (this.meetingScheduleService.findAllByStudent(this._localUser.getId()));\r\n    }\r\n  }\r\n\r\n  protected pipeFindAll(observable: Observable<any>): Observable<MeetingScheduleDTO[]> {\r\n    return observable.pipe (\r\n      map(schedules => {\r\n        return schedules.map((schedule) => {\r\n          this.hasError = false;\r\n\r\n          let dto = new MeetingScheduleDTO();\r\n          let employee = new EmployeeDTO();\r\n          let student = new StudentDTO();\r\n\r\n          dto = Object.assign(dto, schedule);\r\n          employee = Object.assign(employee, dto.getEmployee());\r\n          student = Object.assign(student, dto.getStudent());\r\n\r\n          dto.setEmployee(employee);\r\n          dto.setStudent(student);\r\n\r\n          return dto;\r\n        });\r\n      }),\r\n\r\n      catchError (() => {\r\n        this.hasError = true;\r\n        this.error$.next (true);\r\n        this.handleError (this.modalTexts.error.title, this.modalTexts.loading.body);\r\n        return EMPTY;\r\n      })\r\n    ) as Observable<MeetingScheduleDTO[]>;\r\n  }\r\n\r\n  public setBagdeClass(status: string): string {\r\n    switch (status) {\r\n      case 'Finished': return 'badge badge-success';\r\n      case 'Canceled': return 'badge badge-danger';\r\n      case 'Scheduled': default: return 'badge badge-primary';\r\n    }\r\n  }\r\n\r\n  public toggleButtons(schedule: MeetingScheduleDTO): void {\r\n    this.selectedModel = schedule;\r\n\r\n    const key = 'disabled';\r\n    this.localCancelScheduleButton.nativeElement[key] = (schedule.getMeetingStatus () !== 'Scheduled');\r\n    this.localNewReportButton.nativeElement[key] = (schedule.getMeetingStatus () !== 'Scheduled');\r\n  }\r\n\r\n  public listMeetingStatus(): string[] {\r\n    const listStatus: string[] = ['All'];\r\n    for (const status in MeetingStatus) {\r\n      if (MeetingStatus.hasOwnProperty (status)) {\r\n        listStatus.push (MeetingStatus[status]);\r\n      }\r\n    }\r\n\r\n    return listStatus;\r\n  }\r\n\r\n  public toggleVisibility(type: string, status?: string): void {\r\n    this.isHidden = (type === 'all');\r\n\r\n    if (type === 'all' && status !== '') {\r\n      this.records$ = this.loadData (status);\r\n    }\r\n    else if (type === 'my') {\r\n      this.records$ = this.loadData ();\r\n    }\r\n  }\r\n\r\n  public filterStatus(status: string): void{\r\n      this.records$ = this.loadData (status);\r\n  }\r\n\r\n  public showNewMeetingScheduleModal(): void {\r\n    const result$ = this.modalService.showNewMeetingSchedule ();\r\n    result$.asObservable ().pipe (take (1)).subscribe (\r\n      (success: boolean) => {\r\n        if (success) {\r\n          this.modalService.showAlertSuccess(this.modalTexts.success.title, 'meeting-schedules.messages.scheduled-success');\r\n          this.records$ = this.loadData ();\r\n        }\r\n        else {\r\n          this.modalService.showAlertDanger(this.modalTexts.error.title, 'meeting-schedules.messages.scheduled-error');\r\n        }\r\n      },\r\n      () =>\r\n        this.modalService.showAlertDanger(this.modalTexts.success.title, 'meeting-schedules.messages.scheduled-error')\r\n    );\r\n  }\r\n\r\n  public showNewReportModal(): void {\r\n    const result$ = this.modalService.showNewReport (this.selectedModel);\r\n    result$.asObservable ().pipe (take (1)).subscribe (\r\n      (success: boolean) => {\r\n        if (success) {\r\n          this.modalService.showAlertSuccess (this.modalTexts.success.title, 'report.messages.report-success');\r\n          this.records$ = this.loadData ();\r\n        } else {\r\n          this.modalService.showAlertDanger (this.modalTexts.error.title, 'report.messages.report-error');\r\n        }\r\n      },\r\n      () =>\r\n        this.modalService.showAlertDanger (this.modalTexts.error.title, 'report.messages.report-error')\r\n    );\r\n  }\r\n\r\n  public containsProfile(profile: string): boolean {\r\n    return this.authenticationService.containsProfile (profile);\r\n  }\r\n\r\n  public getTranslatedStatus(status: string): string {\r\n    const key = `meeting-schedules.status.${status.toLowerCase ()}`;\r\n    const index = this.statusDescriptions.indexOf (key);\r\n    return this.statusDescriptions[index];\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MeetingSchedulesRoutingModule } from './meeting-schedules-routing.module';\r\n\r\nimport { BootstrapModule } from 'src/app/shared/bootstrap/bootstrap.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\nimport { MeetingSchedulesListComponent } from './meeting-schedules-list/meeting-schedules-list.component';\r\nimport { MeetingSchedulesFormComponent } from './meeting-schedules-form/meeting-schedules-form.component';\r\n\r\n@NgModule({\r\n  declarations: [MeetingSchedulesListComponent, MeetingSchedulesFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MeetingSchedulesRoutingModule,\r\n    BootstrapModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class MeetingSchedulesModule { }\r\n"]}