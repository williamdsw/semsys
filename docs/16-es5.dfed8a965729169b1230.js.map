{"version":3,"sources":["webpack:///src/app/services/dropdown.service.ts","webpack:///src/app/views/settings/settings.component.html","webpack:///src/app/views/settings/settings-routing.module.ts","webpack:///src/app/views/settings/settings.component.ts","webpack:///src/app/views/settings/settings.module.ts"],"names":["DropdownService","httpClient","this","get","SettingsComponent","SettingsRoutingModule","SettingsModule","ROUTES","path","component","translateService","storageService","dropdownService","modalService","super","subscription$","Subscription","defaultLanguage","currentLanguage","getLanguages","subscribe","response","languages","showAlertDanger","getDefaultLang","unsubscribe","setDefaultLang","showAlertSuccess","onApply","forChild"],"mappings":"mkDAMaA,E,gGAAN,IAAMA,EAAN,WAEL,WAAoBC,aAAA,KAAAA,aAFf,iDAKH,OAAOC,KAAKD,WAAWE,IAAK,mCALzB,M,oCAAMH,GAAe,Y,yBAAfA,EAAe,QAAfA,EAAe,qBAFd,S,wCCgBc,oBAEQ,QACR,Q,gCAFQ,sBAAwB,uCACxB,qCCjBpC,ICSaI,EDDAC,EEDAC,EFPPC,EAAiB,CACnB,CAAEC,KAAM,GAAIC,WCQHL,EAAN,a,kOAAA,iBAOL,WACYM,EACAC,EACFC,EACAC,2BACNC,cAAOJ,EAAkBC,IAJjBD,mBACA,EAAAC,iBACF,EAAAC,kBACA,EAAAC,eAENX,EAAKa,cAAgB,IAAIC,EAAA,EACzBd,EAAKe,gBAAkBf,EAAKgB,gBAAkB,GAHxCL,EAXL,6CAiBK,WAERX,KAAKa,cAAgBb,KAAKU,gBAAgBO,eAAgBC,UACvDC,YAAQ,OAAKnB,EAAKoB,UAAYD,GAC/B,kBACEnB,EAAKW,aAAaU,gBAAiB,qBAAsB,gCAG7DrB,KAAKe,gBAAkBf,KAAKgB,gBAAkBhB,KAAKQ,iBAAiBc,mBAzBjE,oCA6BHtB,KAAKa,cAAcU,gBA7BhB,gCAoC0B,KAAzBvB,KAAKgB,gBAKLhB,KAAKgB,kBAAoBhB,KAAKe,gBAK9Bf,KAAKe,kBAAoBf,KAAKgB,kBAChChB,KAAKQ,iBAAiBgB,eAAgBxB,KAAKgB,iBAA3ChB,sDAC0BA,KAAKgB,iBAC/BhB,KAAKe,gBAAkBf,KAAKgB,gBAC5BhB,KAAKW,aAAac,iBAAkB,uBAAwB,mCAR5DzB,KAAKW,aAAaU,gBAAiB,yBAA0B,sCAL7DrB,KAAKW,aAAaU,gBAAiB,yBAA0B,gCArC5D,GAAgC,K,sCAA1BnB,GAAiB,wC,uBAAjBA,EAAiB,qiB,aFZ9B,oBACI,gBACI,gBACI,iBACI,eACI,Q,oBACJ,OACJ,OACJ,OACA,gBACI,gBACI,gBACI,iBACI,mBACI,S,qBACJ,OACA,uBAAiE,mFAC7D,qBAAkB,gCAAmB,OACrC,2BAIJ,OACJ,OACJ,OACJ,OACJ,OACA,kBACI,iBACI,iBACG,qBAAkE,+BAAS,EAAAwB,YACvE,S,qBACH,OACJ,OACJ,OACJ,OACJ,OACJ,O,MAhCoB,6DASQ,qDAI6B,oCAalC,0D,oDCpBhB,IAAMvB,EAAN,yB,qBAAMA,I,oDAAAA,IAAqB,SAHrB,CAAC,IAAawB,SAAUtB,IACvB,O,eECP,IAAMD,EAAN,yB,qBAAMA,I,oDAAAA,IAAc,SAFd,CAAC,IAAc,EAAuB,Q","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DropdownService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getLanguages() {\r\n    return this.httpClient.get ('assets/files/languages.json');\r\n  }\r\n}\r\n","\r\n<!-- settings -->\r\n<section class=\"box-wrapper w-50 mx-auto my-3 my-md-5\">\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">\r\n            <header>\r\n                <h3 class=\"text-center\"> \r\n                    {{ 'global.menu-links.settings' | translate }} \r\n                </h3>\r\n            </header>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"languageSelect\" class=\"d-none d-md-block\">\r\n                            {{ 'settings.language' | translate }} \r\n                        </label>\r\n                        <select id=\"languageSelect\" class=\"form-control\" #languageSelect (change)=\"currentLanguage = languageSelect.value\">\r\n                            <option value=\"\"> Select an Language </option>\r\n                            <option *ngFor=\"let language of languages\" \r\n                                    [value]=\"language.value\" [selected]=\"language.value == currentLanguage\">\r\n                                    {{ language.description }} \r\n                            </option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card-footer\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                   <button type=\"button\" class=\"btn btn-outline-primary float-right\" (click)=\"onApply ();\">\r\n                       {{ 'global.buttons.apply' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { SettingsComponent } from './settings.component';\r\n\r\nconst ROUTES: Routes = [\r\n    { path: '', component: SettingsComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild (ROUTES)],\r\n    exports: [RouterModule]\r\n})\r\nexport class SettingsRoutingModule {}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { DropdownService } from 'src/app/services/dropdown.service';\r\nimport { ModalService } from 'src/app/services/modal.service';\r\nimport { StorageService } from 'src/app/services/storage.service';\r\n\r\nimport { BaseTranslateComponent } from 'src/app/shared/base-translate/base-translate.component';\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  templateUrl: './settings.component.html'\r\n})\r\nexport class SettingsComponent extends BaseTranslateComponent implements OnInit, OnDestroy {\r\n\r\n  public languages: {};\r\n  private defaultLanguage: string;\r\n  public currentLanguage: string;\r\n  private subscription$: Subscription;\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected storageService: StorageService,\r\n    private dropdownService: DropdownService,\r\n    private modalService: ModalService) {\r\n      super (translateService, storageService);\r\n      this.subscription$ = new Subscription();\r\n      this.defaultLanguage = this.currentLanguage = '';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.subscription$ = this.dropdownService.getLanguages ().subscribe (\r\n      (response) => this.languages = response,\r\n      () =>\r\n        this.modalService.showAlertDanger ('modal.titles.error', 'modal.messages.unable-load')\r\n    );\r\n\r\n    this.defaultLanguage = this.currentLanguage = this.translateService.getDefaultLang ();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription$.unsubscribe ();\r\n  }\r\n\r\n  // HELPER FUNCTIONS\r\n\r\n  public onApply(): void {\r\n\r\n    if (this.currentLanguage === '') {\r\n      this.modalService.showAlertDanger ('modal.titles.attention', 'settings.choose-language');\r\n      return;\r\n    }\r\n\r\n    if (this.currentLanguage === this.defaultLanguage) {\r\n      this.modalService.showAlertDanger ('modal.titles.attention', 'settings.choose-different-language');\r\n      return;\r\n    }\r\n\r\n    if (this.defaultLanguage !== this.currentLanguage) {\r\n      this.translateService.setDefaultLang (this.currentLanguage);\r\n      super.setDefaultLanguage (this.currentLanguage);\r\n      this.defaultLanguage = this.currentLanguage;\r\n      this.modalService.showAlertSuccess ('modal.titles.success', 'modal.messages.setting-applied');\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SettingsRoutingModule } from './settings-routing.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\nimport { SettingsComponent } from './settings.component';\r\n\r\n@NgModule({\r\n    declarations: [SettingsComponent],\r\n    imports: [CommonModule, SettingsRoutingModule, SharedModule]\r\n})\r\nexport class SettingsModule {}\r\n"]}